{"title":"从零开始撸框架(2)-项目龙骨","uid":"1f961444d2b8322d4f975faeb98fbea1","slug":"从零开始撸框架(2)-项目龙骨","date":"2021-04-29T02:03:09.000Z","updated":"2021-06-21T14:00:35.153Z","comments":true,"path":"api/articles/从零开始撸框架(2)-项目龙骨.json","keywords":["Coder","Scalaer","Javaer"],"cover":"/images/vertxlogo.png","content":"<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><p>上文说到框架包含Ioc、Di、Orm、Cache等功能,其中只有前两者为核心功能.那么结构上可以采用分包结构开发,即分为核心、组件等功能包,如下.</p>\n<ul>\n<li>org.btr.ygo.core 核心包,包含了框架ioc、di功能,为其他组件提供支持.</li>\n<li>org.btr.ygo.tp tp意为(third-party),可以将数据库、缓存等需要引入第三方jar的功能放到这.</li>\n<li>org.btr.ygo.web web功能</li>\n</ul>\n<p>接下来我们先完成core核心包的功能开发.</p>\n<hr>\n<h2 id=\"工厂\"><a href=\"#工厂\" class=\"headerlink\" title=\"工厂\"></a>工厂</h2><p>说到核心Ioc、Di自然离不开工厂模式.我们先准备写工厂会用到的jar</p>\n<p><strong>build.gradle</strong></p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 高性能反射</span></span><br><span class=\"line\">  <span class=\"keyword\">compile</span> <span class=\"string\">&quot;com.esotericsoftware:reflectasm:1.11.9&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">// vertx核心jar</span></span><br><span class=\"line\">  <span class=\"keyword\">compile</span> <span class=\"string\">&quot;io.vertx:vertx-core:$vertxVersion&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"辅助类\"><a href=\"#辅助类\" class=\"headerlink\" title=\"辅助类\"></a>辅助类</h3><p>类工厂会经常用到反射,我们需要写几个类来辅助工厂实现.</p>\n<p>函数类,这里会存放以后会用到的各种函数式方法.<br><strong>EnsureSuppliver.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.funtions;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * java8的异常版本</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> java.util.function.Supplier</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">EnsureSuppliver</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  T <span class=\"title function_\">get</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>EnsureExec.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.funtions;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * java8的异常版本</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> java.util.function.Consumer</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">EnsureExec</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">exec</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Fn.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.kit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.log4j.Log4j2;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.funtions.EnsureExec;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.funtions.EnsureSuppliver;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Supplier;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 函数类,封装了条件分支以及非空判断.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Log4j2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Fn</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 连接池函数,优先使用key在池中找可用value,找不到才会通过Supplier去创建一个value.</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;K, V&gt; V <span class=\"title function_\">pool</span><span class=\"params\">(Map&lt;K, V&gt; map, K key, Supplier&lt;V&gt; fn)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">V</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> map.get(key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Objects.isNull(value)) &#123;</span><br><span class=\"line\">      value = fn.get();</span><br><span class=\"line\">      map.put(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">ensureRun</span><span class=\"params\">(EnsureSuppliver&lt;T&gt; fn, Object... args)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ensureRun(<span class=\"literal\">null</span>, fn, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">ensureRun</span><span class=\"params\">(T defaultValue, EnsureSuppliver&lt;T&gt; fn, Object... args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">T</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Arrays.stream(args).allMatch(Objects::nonNull)) ret = fn.get();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Objects.isNull(ret)) ret = defaultValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">ensureRun</span><span class=\"params\">(<span class=\"type\">boolean</span> condition, EnsureSuppliver&lt;T&gt; fn1, EnsureSuppliver&lt;T&gt; fn2)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">T</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (condition &amp;&amp; Objects.nonNull(fn1)) ret = fn1.get();</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!condition &amp;&amp; Objects.nonNull(fn2)) ret = fn2.get();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ensureExec</span><span class=\"params\">(EnsureExec fn, Object... args)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Arrays.stream(args).allMatch(Objects::nonNull)) fn.exec();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">      ex.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ensureExec</span><span class=\"params\">(<span class=\"type\">boolean</span> condition, EnsureExec fn1)</span> &#123;</span><br><span class=\"line\">    ensureExec(condition, fn1, <span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ensureExec</span><span class=\"params\">(<span class=\"type\">boolean</span> condition, EnsureExec fn1, EnsureExec fn2)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (condition &amp;&amp; Objects.nonNull(fn1)) fn1.exec();</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!condition &amp;&amp; Objects.nonNull(fn2)) fn2.exec();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">      ex.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">join</span><span class=\"params\">(CharSequence delimiter, Object... param)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Fn.ensureRun(</span><br><span class=\"line\">      () -&gt; Arrays.stream(param).map(Objects::toString).collect(Collectors.joining(delimiter)),</span><br><span class=\"line\">      delimiter, param);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>反射类,有关反射的方法都放在这.<br><strong>Reflect.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.kit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.esotericsoftware.reflectasm.ConstructorAccess;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.log4j.Log4j2;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.val;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Log4j2</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Reflect</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// reflectasm开销主要在于对象的获取,我们把它存起来.</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;Class&lt;?&gt;, ConstructorAccess&gt; CONSTRUCTORS = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">constructor</span><span class=\"params\">(Class&lt;?&gt; cls, Object... args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">T</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">val</span> <span class=\"variable\">constructors</span> <span class=\"operator\">=</span> cls.getDeclaredConstructors();</span><br><span class=\"line\">      <span class=\"comment\">// 拿到类的所有构造函数,我们根据参数来判断选用何种方式创建对象.</span></span><br><span class=\"line\">      <span class=\"comment\">// 优先使用无参,这样能调用到reflectasm.</span></span><br><span class=\"line\">      <span class=\"comment\">// 无参不满足就只能走Java原生了.</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> args.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == size) ret = noArgConstructor(cls);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (size != constructor.getParameterTypes().length) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        ret = (T) constructor.newInstance(args);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 这里用到了reflectasm高性能反射,缺点就是仅支持无参.</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">noArgConstructor</span><span class=\"params\">(Class&lt;?&gt; cls)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">access</span> <span class=\"operator\">=</span> Fn.pool(CONSTRUCTORS, cls, () -&gt; ConstructorAccess.get(cls));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) access.newInstance();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本体\"><a href=\"#本体\" class=\"headerlink\" title=\"本体\"></a>本体</h3><p><strong>Trunk.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.kit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.log4j.Log4j2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Log4j2</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Trunk</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 单例存储所有类对象</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; SINGLETON = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">  <span class=\"comment\">// 所有扫描的类</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Set&lt;Class&lt;?&gt;&gt; CLASSES = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">  <span class=\"comment\">// 单例,优先读map对象,无则懒加载获取实例并存入map.</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">singleton</span><span class=\"params\">(Class&lt;?&gt; cls, Object... args)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) Fn.pool(SINGLETON, cls.getName(), () -&gt; instance(cls, args));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 实例,每调用一次产生一例.</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">instance</span><span class=\"params\">(Class&lt;?&gt; cls, Object... args)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Fn</span><br><span class=\"line\">      .ensureRun(<span class=\"number\">0</span> == args.length, () -&gt; Reflect.noArgConstructor(cls), () -&gt; Reflect.constructor(cls, args));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p><strong>TrunkTest.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.kit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.log4j.Log4j2;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.val;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.TestApi;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Assert;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Log4j2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TrunkTest</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> Trunk.instance(TestApi.class);</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> Trunk.instance(TestApi.class);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;i1: &#123;&#125;, i2: &#123;&#125;&quot;</span>, i1, i2);</span><br><span class=\"line\">    Assert.assertNotEquals(i1, i2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSingleton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> Trunk.singleton(TestApi.class);</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> Trunk.singleton(TestApi.class);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;i1: &#123;&#125;, i2: &#123;&#125;&quot;</span>, i1, i2);</span><br><span class=\"line\">    Assert.assertEquals(i1, i2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试结果<br><img src=\"/images/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%92%B8%E6%A1%86%E6%9E%B6/2/testret1.png\" alt=\"运行结果\"></p>\n<hr>\n<h2 id=\"类扫描加载\"><a href=\"#类扫描加载\" class=\"headerlink\" title=\"类扫描加载\"></a>类扫描加载</h2><p>Bean管理工厂有了接下来我们来实现类的扫描加载.</p>\n<h3 id=\"辅助类-1\"><a href=\"#辅助类-1\" class=\"headerlink\" title=\"辅助类\"></a>辅助类</h3><p>由于包比较多,我们可以一包一线程的方式进行扫描,加速类的扫描.<br><strong>PackageThread.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.kit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.val;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.JarURLConnection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLDecoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedHashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Predicate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 包扫描线程,一包一线程.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PackageThread</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\">  Set&lt;Class&lt;?&gt;&gt; classes = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">PackageThread</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">    setName(<span class=\"string\">&quot;ygo-package-scanner-&quot;</span> + getId());</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    classes.addAll(getClasses(<span class=\"literal\">null</span>, name));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Set&lt;Class&lt;?&gt;&gt; getClasses(Predicate&lt;Class&lt;?&gt;&gt; filter, String name) &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">classes</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashSet</span>&lt;Class&lt;?&gt;&gt;();</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">recursive</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// a.b.c -&gt; a/b/c</span></span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">pkgDir</span> <span class=\"operator\">=</span> name.replace(<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">    Fn.ensureExec(() -&gt; &#123;</span><br><span class=\"line\">      <span class=\"type\">val</span> <span class=\"variable\">dirs</span> <span class=\"operator\">=</span> Thread.currentThread().getContextClassLoader().getResources(pkgDir);</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (dirs.hasMoreElements()) &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> dirs.nextElement();</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">protocol</span> <span class=\"operator\">=</span> url.getProtocol();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;file&quot;</span>.equals(protocol)) &#123;</span><br><span class=\"line\">          <span class=\"type\">val</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> URLDecoder.decode(url.getFile(), StandardCharsets.UTF_8);</span><br><span class=\"line\">          findAndAdd(pkgDir, path, classes);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;jar&quot;</span>.equals(protocol))</span><br><span class=\"line\">          classes.addAll(getJarClasses(pkgDir, name, url, recursive));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> == filter ? classes : classes.stream().filter(filter).collect(Collectors.toSet());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Set&lt;Class&lt;?&gt;&gt; getJarClasses(String pkgDir, String name, URL url,</span><br><span class=\"line\">    <span class=\"type\">boolean</span> recursive) &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">classes</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashSet</span>&lt;Class&lt;?&gt;&gt;();</span><br><span class=\"line\">    Fn.ensureRun(() -&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 去掉第一个.</span></span><br><span class=\"line\">      <span class=\"type\">var</span> <span class=\"variable\">pkgPath</span> <span class=\"operator\">=</span> (name.startsWith(<span class=\"string\">&quot;.&quot;</span>)) ? name.substring(<span class=\"number\">1</span>) : name;</span><br><span class=\"line\">      <span class=\"type\">val</span> <span class=\"variable\">jar</span> <span class=\"operator\">=</span> ((JarURLConnection) url.openConnection()).getJarFile();</span><br><span class=\"line\">      <span class=\"type\">val</span> <span class=\"variable\">entries</span> <span class=\"operator\">=</span> jar.entries();</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (entries.hasMoreElements()) &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">entry</span> <span class=\"operator\">=</span> entries.nextElement();</span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">entryName</span> <span class=\"operator\">=</span> entry.getName();</span><br><span class=\"line\">        <span class=\"comment\">// 去掉第一个/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (entryName.charAt(<span class=\"number\">0</span>) == <span class=\"string\">&#x27;/&#x27;</span>) entryName = entryName.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (entryName.startsWith(pkgDir)) &#123;</span><br><span class=\"line\">          <span class=\"type\">val</span> <span class=\"variable\">idx</span> <span class=\"operator\">=</span> entryName.lastIndexOf(<span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">          <span class=\"comment\">// entryName存在/说明是package</span></span><br><span class=\"line\">          <span class=\"comment\">// java/lang -&gt; java.lang</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (idx != -<span class=\"number\">1</span>) pkgPath = entryName.substring(<span class=\"number\">0</span>, idx).replace(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ((idx != -<span class=\"number\">1</span>) || recursive) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// class文件</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (entryName.endsWith(<span class=\"string\">&quot;.class&quot;</span>) &amp;&amp; !entry.isDirectory()) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 提取class文件名</span></span><br><span class=\"line\">              <span class=\"type\">val</span> <span class=\"variable\">clsName</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                entryName</span><br><span class=\"line\">                  .substring(pkgPath.length() + <span class=\"number\">1</span>, entryName.lastIndexOf(<span class=\"string\">&quot;.class&quot;</span>));</span><br><span class=\"line\">              classes.add(Thread.currentThread().getContextClassLoader()</span><br><span class=\"line\">                .loadClass(pkgPath + <span class=\"string\">&#x27;.&#x27;</span> + clsName));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;, pkgDir, name, url);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> classes;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">findAndAdd</span><span class=\"params\">(String pkgDir, String path, Set&lt;Class&lt;?&gt;&gt; classes)</span> &#123;</span><br><span class=\"line\">    Fn.ensureExec(() -&gt; &#123;</span><br><span class=\"line\">      <span class=\"type\">val</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(path);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!file.exists() || !file.isDirectory()) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"type\">val</span> <span class=\"variable\">classFiles</span> <span class=\"operator\">=</span></span><br><span class=\"line\">        file.listFiles(pathname -&gt; (file.isDirectory()) || file.getName().endsWith(<span class=\"string\">&quot;.class&quot;</span>));</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Objects.isNull(classFiles)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 去掉第一个.</span></span><br><span class=\"line\">      <span class=\"type\">val</span> <span class=\"variable\">pkgPath</span> <span class=\"operator\">=</span> (pkgDir.startsWith(<span class=\"string\">&quot;.&quot;</span>)) ? pkgDir.substring(<span class=\"number\">1</span>) : pkgDir;</span><br><span class=\"line\">      <span class=\"comment\">// 是否存在另一个文件夹</span></span><br><span class=\"line\">      <span class=\"type\">val</span> <span class=\"variable\">processedName</span> <span class=\"operator\">=</span> pkgPath.replace(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (File cls : classFiles) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 目录直接跳过</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cls.isDirectory())</span><br><span class=\"line\">          findAndAdd(processedName + <span class=\"string\">&#x27;.&#x27;</span> + cls.getName(), cls.getAbsolutePath(),</span><br><span class=\"line\">            classes);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"type\">val</span> <span class=\"variable\">clsName</span> <span class=\"operator\">=</span> cls.getName();</span><br><span class=\"line\">          <span class=\"type\">val</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> clsName.substring(<span class=\"number\">0</span>, clsName.lastIndexOf(<span class=\"string\">&quot;.class&quot;</span>));</span><br><span class=\"line\">          classes.add(Thread.currentThread().getContextClassLoader()</span><br><span class=\"line\">            .loadClass(processedName + <span class=\"string\">&#x27;.&#x27;</span> + name));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, pkgDir, path);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本体-1\"><a href=\"#本体-1\" class=\"headerlink\" title=\"本体\"></a>本体</h3><p><strong>Packages.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.kit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.log4j.Log4j2;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.val;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.constant.Console;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Log4j2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Packages</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 忽略不扫描的包</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Set&lt;String&gt; IGNORE_PACKAGES = Set.of(</span><br><span class=\"line\">    <span class=\"string\">&quot;ch.qos.logback&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;io.vertx.core&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;io.netty&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;com.fasterxml.jackson&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;com.esotericsoftware&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;java&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;javax&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;jdk&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sun&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;groovy&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;org.graalvm&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;org.apache&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;org.jboss&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;com.sun&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;org.slf4j&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;org.yaml&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;org.junit&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;org.apache.logging.log4j&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Set&lt;Class&lt;?&gt;&gt; scan() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Trunk.CLASSES.isEmpty()) &#123;</span><br><span class=\"line\">      <span class=\"type\">val</span> <span class=\"variable\">classes</span> <span class=\"operator\">=</span> scan(getPackages().toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;&#125;));</span><br><span class=\"line\">      Trunk.CLASSES.addAll(classes);</span><br><span class=\"line\">      log.info(Console.SCANNED, <span class=\"string\">&quot;Class&quot;</span>, classes.size());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Trunk.CLASSES;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Set&lt;String&gt; <span class=\"title function_\">getPackages</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">pkgs</span> <span class=\"operator\">=</span> Arrays.stream(Package.getPackages())</span><br><span class=\"line\">      .map(Package::getName)</span><br><span class=\"line\">      .filter(name -&gt; IGNORE_PACKAGES.stream().noneMatch(name::startsWith))</span><br><span class=\"line\">      .collect(Collectors.toSet());</span><br><span class=\"line\">    log.info(Console.SCANNED, <span class=\"string\">&quot;Package&quot;</span>, pkgs.size());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pkgs;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 多线程扫描</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HashSet&lt;Class&lt;?&gt;&gt; scan(String[] dirs) &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">threads</span> <span class=\"operator\">=</span> Arrays.stream(dirs).map(PackageThread::<span class=\"keyword\">new</span>).collect(Collectors.toSet());</span><br><span class=\"line\">    threads.forEach(Thread::start);</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;Class&lt;?&gt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 主线程等待子线程全部扫描完毕</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (PackageThread thread : threads) thread.join();</span><br><span class=\"line\">      <span class=\"comment\">// 将所有线程值合并</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (PackageThread thread : threads) ret.addAll(thread.classes);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">      ex.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p><strong>PackageTest.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.kit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.val;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.hamcrest.CoreMatchers;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Assert;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PackagesTest</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">classes</span> <span class=\"operator\">=</span> Packages.scan();</span><br><span class=\"line\">    Assert.assertThat(classes, CoreMatchers.hasItem(Packages.class));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试结果<br><img src=\"/images/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%92%B8%E6%A1%86%E6%9E%B6/2/testret2.png\" alt=\"运行结果\"></p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这一章我们完成了核心模块的龙骨搭建,让它拥有了两个最原始的功能,即工厂和类集合,有了这俩我们才能开发其他的组件.</p>\n","text":"项目结构上文说到框架包含Ioc、Di、Orm、Cache等功能,其中只有前两者为核心功能.那么结构上可以采用分包结构开发,即分为核心、组件等功能包,如下. or...","permalink":"/post/从零开始撸框架(2)-项目龙骨","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"从零开始","slug":"从零开始","count":8,"path":"api/categories/从零开始.json"}],"tags":[{"name":"Vert.x","slug":"Vert-x","count":8,"path":"api/tags/Vert-x.json"},{"name":"Actor","slug":"Actor","count":8,"path":"api/tags/Actor.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"Java","slug":"Java","count":9,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">项目结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E5%8E%82\"><span class=\"toc-text\">工厂</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%85%E5%8A%A9%E7%B1%BB\"><span class=\"toc-text\">辅助类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E4%BD%93\"><span class=\"toc-text\">本体</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">测试</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E6%89%AB%E6%8F%8F%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">类扫描加载</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%85%E5%8A%A9%E7%B1%BB-1\"><span class=\"toc-text\">辅助类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E4%BD%93-1\"><span class=\"toc-text\">本体</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95-1\"><span class=\"toc-text\">测试</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"因雨而生","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"一直没脱离低级趣味的Coder","socials":{"github":"https://github.com/BornToRain","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"从零开始撸框架(3)-类扫描器","uid":"bf9123d57d7a0fda9f11ed154298fba1","slug":"从零开始撸框架(3)-类扫描器","date":"2021-05-01T16:01:49.000Z","updated":"2021-05-02T00:03:01.318Z","comments":true,"path":"api/articles/从零开始撸框架(3)-类扫描器.json","keywords":["Coder","Scalaer","Javaer"],"cover":"/images/vertxlogo.png","text":"上一章我们已经把每个包中的类都统一加载到一个Set中了,以后凡是需要用到类的场景我们都可以从Set集合中取出,但是光这样还不够好.往后所有操作都依赖于这一个集合...","permalink":"/post/从零开始撸框架(3)-类扫描器","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"从零开始","slug":"从零开始","count":8,"path":"api/categories/从零开始.json"}],"tags":[{"name":"Vert.x","slug":"Vert-x","count":8,"path":"api/tags/Vert-x.json"},{"name":"Actor","slug":"Actor","count":8,"path":"api/tags/Actor.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"Java","slug":"Java","count":9,"path":"api/tags/Java.json"}],"author":{"name":"因雨而生","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"一直没脱离低级趣味的Coder","socials":{"github":"https://github.com/BornToRain","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"奇淫巧技(2)-Jvm篇","uid":"1da24bfae57d43586cc931d1d18b42d9","slug":"奇淫巧技(2)-Jvm篇","date":"2021-04-28T00:04:30.000Z","updated":"2021-04-29T02:04:35.988Z","comments":true,"path":"api/articles/奇淫巧技(2)-Jvm篇.json","keywords":["Coder","Scalaer","Javaer"],"cover":"/images/javalogo.png","text":"函数内联在讲函数内联之前还得讲一个Jvm经常遇到的异常StackOverFlowException,该异常一般翻译成堆栈溢出异常,其实正确或者说更严谨的翻译应该...","permalink":"/post/奇淫巧技(2)-Jvm篇","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"奇淫巧技","slug":"奇淫巧技","count":2,"path":"api/categories/奇淫巧技.json"}],"tags":[{"name":"Jvm","slug":"Jvm","count":1,"path":"api/tags/Jvm.json"}],"author":{"name":"因雨而生","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"一直没脱离低级趣味的Coder","socials":{"github":"https://github.com/BornToRain","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}