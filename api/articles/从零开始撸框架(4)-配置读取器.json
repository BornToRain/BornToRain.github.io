{"title":"从零开始撸框架(4)-配置读取器","uid":"45dcae5ccfe9e8f63cc7cbe584bb9d7a","slug":"从零开始撸框架(4)-配置读取器","date":"2021-05-01T22:43:37.000Z","updated":"2021-05-07T01:21:36.962Z","comments":true,"path":"api/articles/从零开始撸框架(4)-配置读取器.json","keywords":["Coder","Scalaer","Javaer"],"cover":"/images/vertxlogo.png","content":"<p>到目前为止,框架已经支持了 <em>工厂</em> 、 <em>Bean分组</em> 、 <em>依赖注入</em> ,这一章我们来实现框架配置的读取.</p>\n<h2 id=\"配置读取基类\"><a href=\"#配置读取基类\" class=\"headerlink\" title=\"配置读取基类\"></a>配置读取基类</h2><p>老样子,我们还是先定义一个读取基类,方便后续子类扩展.</p>\n<p><strong>IConfig.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 读取配置文件</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IConfig</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  T <span class=\"title function_\">read</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"辅助类\"><a href=\"#辅助类\" class=\"headerlink\" title=\"辅助类\"></a>辅助类</h3><p>配置加载肯定会涉及到IO流<br><strong>IO.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.kit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.log4j.Log4j2;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.val;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.JarURLConnection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Log4j2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IO</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 确保能获取输入流</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> InputStream <span class=\"title function_\">ensureRead</span><span class=\"params\">(String filename)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Fn.ensureRun(() -&gt; &#123;</span><br><span class=\"line\">      <span class=\"type\">val</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(filename);</span><br><span class=\"line\">      <span class=\"type\">var</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> Fn.ensureRun(file.exists() &amp;&amp; file.isFile(),</span><br><span class=\"line\">        <span class=\"comment\">// 1. 直接读文件</span></span><br><span class=\"line\">        () -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file),</span><br><span class=\"line\">        <span class=\"comment\">// 2. 环境上下文</span></span><br><span class=\"line\">        () -&gt; Thread.currentThread().getContextClassLoader().getResourceAsStream(filename));</span><br><span class=\"line\">      <span class=\"comment\">// 3. 当前类加载器</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Objects.isNull(in)) in = IO.class.getResourceAsStream(filename);</span><br><span class=\"line\">      <span class=\"comment\">// 4. 类加载器</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Objects.isNull(in)) in = ClassLoader.getSystemResourceAsStream(filename);</span><br><span class=\"line\">      <span class=\"comment\">// 5. jar加载</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Objects.isNull(in) &amp;&amp; filename.contains(<span class=\"string\">&quot;jar!/&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(filename);</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">protocol</span> <span class=\"operator\">=</span> url.getProtocol();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;jar&quot;</span>.equals(protocol)) &#123;</span><br><span class=\"line\">          <span class=\"type\">val</span> <span class=\"variable\">jar</span> <span class=\"operator\">=</span> (JarURLConnection) url.openConnection();</span><br><span class=\"line\">          in = jar.getInputStream();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Objects.isNull(in)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(filename);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> in;</span><br><span class=\"line\">    &#125;, filename);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>加载基类,子类继承后实现多种不同的加载方式,比如: <em>yaml</em> 、 <em>xml</em> 、<em>properties</em> 、 <em>json</em> .<br><strong>ILoader.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.kit.Trunk;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ILoader</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里根据后缀名调用对应的loader.</span></span><br><span class=\"line\">  Map&lt;String, ILoader&gt; MAP = Map.of(<span class=\"string\">&quot;.yaml&quot;</span>, Trunk.singleton(YamlLoader.class));</span><br><span class=\"line\">  String <span class=\"title function_\">load</span><span class=\"params\">(String filename)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我只实现yaml读取,其他省略.</p>\n<p>core模块<strong>build.gradle</strong>追加</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 读yaml</span></span><br><span class=\"line\">  <span class=\"keyword\">compile</span> <span class=\"string\">&quot;com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>YamlLoader.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.dataformat.yaml.YAMLMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.kit.Fn;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.kit.IO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">YamlLoader</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ILoader</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">ObjectMapper</span> <span class=\"variable\">YAML</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">YAMLMapper</span>();</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">load</span><span class=\"params\">(String filename)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Fn.ensureRun(() -&gt; YAML.readTree(IO.ensureRead(filename)).toString(), filename);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>Configs.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.kit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.internal.StringUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.vertx.core.json.JsonObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.log4j.Log4j2;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.val;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.config.ILoader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.constant.Console;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Log4j2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Configs</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, JsonObject&gt; CONFIG = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">  <span class=\"comment\">// 框架配置文件名,我这里写死了yaml</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">CONFIG_FILE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;application.yaml&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 框架默认配置</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEFAULT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ygo/&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 默认采用的loader,这里我写死了yaml,可自行扩展成动态.</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">ILoader</span> <span class=\"variable\">LOADER</span> <span class=\"operator\">=</span> ILoader.MAP.get(<span class=\"string\">&quot;.yaml&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 生成读取文件名</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. application.yaml</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. application-key.yaml</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">generateFilename</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Fn.ensureRun(Objects.isNull(key),</span><br><span class=\"line\">      () -&gt; CONFIG_FILE,</span><br><span class=\"line\">      () -&gt; <span class=\"string\">&quot;application-&quot;</span> + key + <span class=\"string\">&quot;.yaml&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> JsonObject <span class=\"title function_\">read</span><span class=\"params\">(String filename)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> generateFilename(filename);</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> CONFIG.get(name);</span><br><span class=\"line\">    <span class=\"comment\">// 缓存有则不再走io流读取</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Objects.nonNull(value)) <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">merged</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JsonObject</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 1.默认配置</span></span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">defaultPath</span> <span class=\"operator\">=</span> DEFAULT + name;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">silent</span> <span class=\"operator\">=</span> loader(defaultPath);</span><br><span class=\"line\">    log.info(Console.CONFIG_READ, <span class=\"string\">&quot;Default&quot;</span>, defaultPath);</span><br><span class=\"line\">    merged.mergeIn(silent, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.用户自定义配置</span></span><br><span class=\"line\">    log.info(Console.CONFIG_READ, <span class=\"string\">&quot;User&quot;</span>, name);</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">custom</span> <span class=\"operator\">=</span> loader(name);</span><br><span class=\"line\">    <span class=\"comment\">// 两者配置都存在的场合需要合并</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!custom.isEmpty()) &#123;</span><br><span class=\"line\">      log.info(Console.MERGE);</span><br><span class=\"line\">      merged.mergeIn(custom, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    CONFIG.put(name, merged);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> merged;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 所有loader加载完后统一转换成Vert.x的JsonObject格式数据.</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> JsonObject <span class=\"title function_\">loader</span><span class=\"params\">(String filename)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> LOADER.load(filename);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Fn</span><br><span class=\"line\">      .ensureRun(StringUtil.isNullOrEmpty(text), JsonObject::<span class=\"keyword\">new</span>, () -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">JsonObject</span>(text));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"框架配置读取器\"><a href=\"#框架配置读取器\" class=\"headerlink\" title=\"框架配置读取器\"></a>框架配置读取器</h2><h3 id=\"本体\"><a href=\"#本体\" class=\"headerlink\" title=\"本体\"></a>本体</h3><p>整个框架的配置<br><strong>YgoConfig.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.vertx.core.json.JsonObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.val;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.constant.Const;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.kit.Configs;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 框架整体配置</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">YgoConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IConfig</span>&lt;JsonObject&gt; &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> JsonObject <span class=\"title function_\">read</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 读取application.yaml</span></span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> Configs.read(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> json.getJsonObject(Const.YGO);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>在 <em>&#x2F;test&#x2F;main&#x2F;resources</em> 、 <em>&#x2F;test&#x2F;main&#x2F;resources&#x2F;ygo&#x2F;</em> 目录下分别添加 <em>application.yaml</em> 文件.<br><strong>application.yaml</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ygo:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">profile:</span> <span class=\"string\">default</span></span><br></pre></td></tr></table></figure>\n\n<p>配置读取测试类<br><strong>IConfigTest.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.val;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.kit.Trunk;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Assert;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IConfigTest</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testYgo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> Trunk.&lt;YgoConfig&gt;singleton(YgoConfig.class);</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> config.read();</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> json.getString(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">    Assert.assertEquals(data, <span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果<br><img src=\"/images/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%92%B8%E6%A1%86%E6%9E%B6/4/testret1.png\" alt=\"运行结果\"></h2><h2 id=\"Vert-x配置读取器\"><a href=\"#Vert-x配置读取器\" class=\"headerlink\" title=\"Vert.x配置读取器\"></a>Vert.x配置读取器</h2><h3 id=\"本体-1\"><a href=\"#本体-1\" class=\"headerlink\" title=\"本体\"></a>本体</h3><p><strong>VertxConfig.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.vertx.core.VertxOptions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.val;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.constant.Const;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.kit.Trunk;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VertxConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IConfig</span>&lt;VertxOptions&gt; &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> VertxOptions <span class=\"title function_\">read</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先读取框架配置</span></span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">ygo</span> <span class=\"operator\">=</span> Trunk.&lt;YgoConfig&gt;singleton(YgoConfig.class);</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> ygo.read();</span><br><span class=\"line\">    <span class=\"comment\">// 从框架配置中读取Vertx部分</span></span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">options</span> <span class=\"operator\">=</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">VertxOptions</span>(config.getJsonObject(Const.VERTX).getJsonObject(Const.OPTIONS));</span><br><span class=\"line\">    <span class=\"comment\">// 这里是我个人习惯,将线程数设置为CPU核心*2</span></span><br><span class=\"line\">    <span class=\"comment\">// 可以参考这个 https://www.cnblogs.com/dennyzhangdd/p/6909771.html</span></span><br><span class=\"line\">    <span class=\"comment\">// 工作线程默认为20,如果没变动则将其改为CPU核数*2;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">20</span> == options.getWorkerPoolSize()) options.setWorkerPoolSize(VertxOptions.DEFAULT_EVENT_LOOP_POOL_SIZE);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> options;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p><em>test</em> 文件夹下的 <em>application.yaml</em> 追加内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ygo:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">profile:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"attr\">vertx:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">vertx-ygo</span></span><br><span class=\"line\">    <span class=\"attr\">options:</span></span><br><span class=\"line\">      <span class=\"attr\">haEnabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">preferNativeTransport:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>IConfigTest.java</strong>追加测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IConfigTest</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testVertx</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> Trunk.&lt;VertxConfig&gt;singleton(VertxConfig.class);</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">options</span> <span class=\"operator\">=</span> config.read();</span><br><span class=\"line\">    Assert.assertTrue(options.getPreferNativeTransport());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试结果<br><img src=\"/images/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%92%B8%E6%A1%86%E6%9E%B6/4/testret2.png\" alt=\"运行结果\"></p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这一章我们实现了框架配置的yaml读取,并且也留下了修改的入口,日后扩展其他方式也无须修改源代码,子类自行实现 <em>ILoader.java</em> 即可.</p>\n<p>框架的其他参数读取同理,扩展 <em>IConfig.java</em> 即可.</p>\n","text":"到目前为止,框架已经支持了 工厂 、 Bean分组 、 依赖注入 ,这一章我们来实现框架配置的读取. 配置读取基类老样子,我们还是先定义一个读取基类,方便后续子...","permalink":"/post/从零开始撸框架(4)-配置读取器","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"从零开始","slug":"从零开始","count":8,"path":"api/categories/从零开始.json"}],"tags":[{"name":"Vert.x","slug":"Vert-x","count":8,"path":"api/tags/Vert-x.json"},{"name":"Actor","slug":"Actor","count":8,"path":"api/tags/Actor.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"Java","slug":"Java","count":9,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E8%AF%BB%E5%8F%96%E5%9F%BA%E7%B1%BB\"><span class=\"toc-text\">配置读取基类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%85%E5%8A%A9%E7%B1%BB\"><span class=\"toc-text\">辅助类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A1%86%E6%9E%B6%E9%85%8D%E7%BD%AE%E8%AF%BB%E5%8F%96%E5%99%A8\"><span class=\"toc-text\">框架配置读取器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E4%BD%93\"><span class=\"toc-text\">本体</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">测试</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">测试结果</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Vert-x%E9%85%8D%E7%BD%AE%E8%AF%BB%E5%8F%96%E5%99%A8\"><span class=\"toc-text\">Vert.x配置读取器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E4%BD%93-1\"><span class=\"toc-text\">本体</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95-1\"><span class=\"toc-text\">测试</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"因雨而生","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"一直没脱离低级趣味的Coder","socials":{"github":"https://github.com/BornToRain","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"从零开始撸框架(5)-与Vert.x集成 基础篇(一)","uid":"6b0291adc1983f086f545c1304c40edc","slug":"从零开始撸框架(5)-与Vert.x集成 基础篇(一)","date":"2021-05-07T00:27:12.000Z","updated":"2021-06-08T08:04:54.998Z","comments":true,"path":"api/articles/从零开始撸框架(5)-与Vert.x集成 基础篇(一).json","keywords":["Coder","Scalaer","Javaer"],"cover":"/images/vertxlogo.png","text":"前两章我们分别讲完了类、配置,让框架有了骨架.接下来几章我们要实现类、配置与Vert.x集成,让框架跑在Vert.x中. 由于接下来会设计到对外提供web服务了...","permalink":"/post/从零开始撸框架(5)-与Vert.x集成 基础篇(一)","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"从零开始","slug":"从零开始","count":8,"path":"api/categories/从零开始.json"}],"tags":[{"name":"Vert.x","slug":"Vert-x","count":8,"path":"api/tags/Vert-x.json"},{"name":"Actor","slug":"Actor","count":8,"path":"api/tags/Actor.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"Java","slug":"Java","count":9,"path":"api/tags/Java.json"},{"name":"代理模式","slug":"代理模式","count":4,"path":"api/tags/代理模式.json"}],"author":{"name":"因雨而生","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"一直没脱离低级趣味的Coder","socials":{"github":"https://github.com/BornToRain","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"从零开始撸框架(3)-类扫描器","uid":"bf9123d57d7a0fda9f11ed154298fba1","slug":"从零开始撸框架(3)-类扫描器","date":"2021-05-01T16:01:49.000Z","updated":"2021-05-02T00:03:01.318Z","comments":true,"path":"api/articles/从零开始撸框架(3)-类扫描器.json","keywords":["Coder","Scalaer","Javaer"],"cover":"/images/vertxlogo.png","text":"上一章我们已经把每个包中的类都统一加载到一个Set中了,以后凡是需要用到类的场景我们都可以从Set集合中取出,但是光这样还不够好.往后所有操作都依赖于这一个集合...","permalink":"/post/从零开始撸框架(3)-类扫描器","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"从零开始","slug":"从零开始","count":8,"path":"api/categories/从零开始.json"}],"tags":[{"name":"Vert.x","slug":"Vert-x","count":8,"path":"api/tags/Vert-x.json"},{"name":"Actor","slug":"Actor","count":8,"path":"api/tags/Actor.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"Java","slug":"Java","count":9,"path":"api/tags/Java.json"}],"author":{"name":"因雨而生","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"一直没脱离低级趣味的Coder","socials":{"github":"https://github.com/BornToRain","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}