{"title":"从零开始撸框架(1)-写在开始之前","uid":"f1128ae1167b6a3027acc0aa9f078931","slug":"从零开始撸框架(1)-写在开始之前","date":"2021-04-27T19:27:03.000Z","updated":"2021-04-27T20:46:12.260Z","comments":true,"path":"api/articles/从零开始撸框架(1)-写在开始之前.json","keywords":["Coder","Scalaer","Javaer"],"cover":null,"content":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>码农日常搬砖中都听说过一句话: 不要重复造轮子(一说是不要造重复的轮子).与公司来说这句话自然是绝对正确的,自研或仿造的轮子往往各方面都不如开源现有的轮子来得好,这样对公司来说无疑是最致命的.但是与个人来说,造轮子的过程同时是阅读他人代码提升自己的过程,而且轮子造完自身也会有种莫名的满足感.</p>\n<p>随着开发的深入,项目需求越来越复杂.市面上一些开源轮子(Spring-boot,Vert.x,Akka)无法满足我们功能需求,自此日常开发中也会采用一些二次轮子(即基于开源轮子再封装一层, ex: Jeecg-boot, Di-boot…各种基于Spring-boot或封装或魔改的轮子).这类二次轮子中维护者或个人或公司,个人的全靠满腔热血,bug反馈以及后期升级堪忧.公司的往往包含多版本(民用|商用|企业)等并且收费不低.关于收费这事我个人看法就是不耻,诚然小部分公司都对这些开源轮子进行了大部分改动,但那总归只是少数.绝大部分都是给开源轮子封了一层皮就敢拿出来卖,这也是前阵子为啥<a href=\"https://www.infoq.cn/article/aipbqm4q5dw6gi3lvpc4\">Elastic修改开源协议</a>这档子事.</p>\n<p>回到现在,既然市面上二次轮子也不少.我如今趁着三分钟热度也来造一个轮子未尝不可,只是这次我要和市面上常见的那些妖艳贱货不一样,绝对不会采用一些已经烂大街的技术或框架(当然这并不绝对).这次写下这一系列文章一方面给自己留档,一方面给以后那些想造轮子又找不到方法的朋友参考,这个小白兔有人替你们当了.</p>\n<h2 id=\"定位\"><a href=\"#定位\" class=\"headerlink\" title=\"定位\"></a>定位</h2><p>所谓定位就是这框架目的是什么,起到什么作用,解决什么问题,适用什么场景,面向什么人员.个人认为对于项目刚启动时候的定位不一定就需要画类图写设计文档,毕竟最初只有雏形概念.我们完全可以把核心概念草稿下来就好,日后再补上类图设计文档也不是问题.</p>\n<p>我们这次框架目的就是造一个类似于Spring-boot的轮子,但是又不那么大众化,定位自然就是一个拥有Ioc|Di|Cache|Orm|Rpc的web开发框架.</p>\n<h2 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h2><p>说完了定位来聊聊技术的选型,框架一般来说最重要就那么几个东西,稳定|易用|高性能|可扩展,结合一下几点我们可以筛选出以下几个来.</p>\n<ol>\n<li><a href=\"https://www.java.com/zh-CN/\">Java</a> 语言层面毫无疑问它是最满足需求的,比他高性能(c|c++|rust…)的没他简单,比他简单的又没他的性能(js|php…),我个人是偏爱scala的,奈何jvm上和java比除了自己写起来舒服没啥特别优势了.</li>\n<li><a href=\"https://vertx.io/\">Vert.x</a> Netty是Jvm上的性能霸主,只要跟性能沾边的就离不开Netty,而Netty过于底层不太适合直接写web框架,最终选用Vert.x(Quarkus,Micronaut封装比Vert.x还是多了些,尽量采用更底层的toolkit而不是现成的framework).</li>\n<li><a href=\"https://redis.io/\">Redis</a> 无心插柳柳成荫,本意是作为NoSql奈何在缓存方面的光芒掩盖了它本身的定位.</li>\n</ol>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><p>截止到文章日期,Jdk最新是16,lts长期稳定支持版是11,故我们采用Jdk11.</p>\n<ol>\n<li>Jdk11</li>\n<li>Idea</li>\n<li>Gradle Spring5开始从Maven切到了Gradle,现在新项目没理由用Maven.</li>\n</ol>\n<h2 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h2><p>好的框架从命名开始,复杂难记的框架注定火不起来,经过深思熟虑后框架名为ygo(Yu-Gi-Oh),懂的都懂.</p>\n<h2 id=\"开搞\"><a href=\"#开搞\" class=\"headerlink\" title=\"开搞\"></a>开搞</h2><p>写框架之前的准备我们都做完了,下一步就来搭建框架的龙骨了.<br><a href=\"https://cdn.jsdelivr.net/gh/BornToRain/BornToRain.github.io@master/images/mangyitian.jpg\"></a></p>\n","feature":null,"text":"起因码农日常搬砖中都听说过一句话: 不要重复造轮子(一说是不要造重复的轮子).与公司来说这句话自然是绝对正确的,自研或仿造的轮子往往各方面都不如开源现有的轮子来得好,这样对公司来说无疑是最致命的.但是与个人来说,造轮子的过程同时是阅读他人代码提升自己的过程,而且轮子造完自身也会有...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"从零开始","slug":"从零开始","count":1,"path":"api/categories/从零开始.json"}],"tags":[{"name":"Java","slug":"Java","count":2,"path":"api/tags/Java.json"},{"name":"Vert.x","slug":"Vert-x","count":1,"path":"api/tags/Vert-x.json"},{"name":"Actor","slug":"Actor","count":1,"path":"api/tags/Actor.json"},{"name":"设计模式","slug":"设计模式","count":1,"path":"api/tags/设计模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B5%B7%E5%9B%A0\"><span class=\"toc-text\">起因</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%BD%8D\"><span class=\"toc-text\">定位</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B\"><span class=\"toc-text\">技术选型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">开发环境</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">命名</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%80%E6%90%9E\"><span class=\"toc-text\">开搞</span></a></li></ol>","author":{"name":"因雨而生","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/BornToRain/BornToRain.github.io@master/images/avatar.jpg","link":"/","description":"一直没脱离低级趣味的Coder","socials":{"github":"https://github.com/BornToRain","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"奇淫巧技(2)-Jvm篇","uid":"1da24bfae57d43586cc931d1d18b42d9","slug":"奇淫巧技(2)-Jvm篇","date":"2021-04-27T23:20:29.000Z","updated":"2021-04-28T00:21:43.303Z","comments":true,"path":"api/articles/奇淫巧技(2)-Jvm篇.json","keywords":["Coder","Scalaer","Javaer"],"cover":null,"text":"函数内联在讲函数内联之前还得讲一个Jvm经常遇到的异常StackOverFlowException,该异常一般翻译成堆栈溢出异常,其实正确或者说更严谨的翻译应该是栈溢出,栈溢出大部分发生在函数的循环或递归调用之中,极少数在对象循环创建中. 函数调用过程 Jvm栈内存会存储所有热度...","link":"","photos":[],"count_time":{"symbolsCount":995,"symbolsTime":"1 mins."},"categories":[{"name":"奇淫巧技","slug":"奇淫巧技","count":2,"path":"api/categories/奇淫巧技.json"}],"tags":[{"name":"Jvm","slug":"Jvm","count":1,"path":"api/tags/Jvm.json"}],"author":{"name":"因雨而生","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/BornToRain/BornToRain.github.io@master/images/avatar.jpg","link":"/","description":"一直没脱离低级趣味的Coder","socials":{"github":"https://github.com/BornToRain","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}