{"title":"从零开始撸框架(3)-类扫描器","uid":"bf9123d57d7a0fda9f11ed154298fba1","slug":"从零开始撸框架(3)-类扫描器","date":"2021-05-01T16:01:49.000Z","updated":"2021-05-02T00:03:01.318Z","comments":true,"path":"api/articles/从零开始撸框架(3)-类扫描器.json","keywords":["Coder","Scalaer","Javaer"],"cover":"/images/vertxlogo.png","content":"<p>上一章我们已经把每个包中的类都统一加载到一个Set中了,以后凡是需要用到类的场景我们都可以从Set集合中取出,但是光这样还不够好.<br>往后所有操作都依赖于这一个集合,这也意味着我们对集合元素有改动都会影响到所有组件使用.<br>所以这一章我们来进一步细化,根据不同的需求把这个大Set集合拆分成小的集合.</p>\n<h2 id=\"扫描基类\"><a href=\"#扫描基类\" class=\"headerlink\" title=\"扫描基类\"></a>扫描基类</h2><p>这里我们定义一个扫描接口,接收类集合得出我们想要的结果,方便子类根据不同需求进行扩展.</p>\n<p><strong>IScanner.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.scan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IScanner</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  T <span class=\"title function_\">scan</span><span class=\"params\">(Set&lt;Class&lt;?&gt;&gt; classes)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面根据需求实现不同的子类,这里采用的是<a href=\"https://zhuanlan.zhihu.com/p/93612337\">Reactor</a>架构模型.</p>\n<hr>\n<h2 id=\"事件循环线程-Eventloop-扫描器\"><a href=\"#事件循环线程-Eventloop-扫描器\" class=\"headerlink\" title=\"事件循环线程(Eventloop)扫描器\"></a>事件循环线程(Eventloop)扫描器</h2><p>首先我们把所有事件循环的类从Set集合中独立出来,这块是框架调度分发的核心,完全有独立出来的意义.</p>\n<h3 id=\"辅助类\"><a href=\"#辅助类\" class=\"headerlink\" title=\"辅助类\"></a>辅助类</h3><p>这里定义几种类型,分别对应http、tcp、sock服务.<br><strong>EventloopType.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.constant;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">EventloopType</span> &#123;</span><br><span class=\"line\">  HTTP, TCP, SOCK;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> List&lt;String&gt; HTTP_TYPE =</span><br><span class=\"line\">    Arrays.asList(HTTP.name().toLowerCase(), SOCK.name().toLowerCase());</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isHttp</span><span class=\"params\">(String type)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HTTP_TYPE.contains(type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isNet</span><span class=\"params\">(String type)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TCP.name().equalsIgnoreCase(type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注解式开发,用注解把类标识出来.<br><strong>Eventloop.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.annotations;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.constant.EventloopType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Documented;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Inherited;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE,ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Eventloop &#123;</span><br><span class=\"line\">  <span class=\"type\">boolean</span> <span class=\"title function_\">ha</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">instances</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  EventloopType <span class=\"title function_\">type</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> EventloopType.HTTP;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本体\"><a href=\"#本体\" class=\"headerlink\" title=\"本体\"></a>本体</h3><p>具体的事件循环扫描实现,通过扫描包含@Eventloop注解的类.</p>\n<h2 id=\"EventloopScanner-java-测试IScannerTest-java测试结果\"><a href=\"#EventloopScanner-java-测试IScannerTest-java测试结果\" class=\"headerlink\" title=\"EventloopScanner.java### 测试IScannerTest.java测试结果\"></a><strong>EventloopScanner.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.scan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.log4j.Log4j2;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.val;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.annotations.Eventloop;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.constant.Console;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Log4j2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EventloopScanner</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IScanner</span>&lt;Set&lt;Class&lt;?&gt;&gt;&gt; &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Set&lt;Class&lt;?&gt;&gt; scan(Set&lt;Class&lt;?&gt;&gt; classes) &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span></span><br><span class=\"line\">      classes.stream().filter(d -&gt; d.isAnnotationPresent(Eventloop.class)).collect(Collectors.toSet());</span><br><span class=\"line\">    log.info(Console.SCANNED, <span class=\"string\">&quot;Eventloop&quot;</span>, ret.size());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>### 测试<br><strong>IScannerTest.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.scan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.log4j.Log4j2;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.val;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.annotations.Eventloop;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.kit.Packages;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.kit.Trunk;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.hamcrest.CoreMatchers;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Assert;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Log4j2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IScannerTest</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Eventloop</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestEventloop</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testEventloop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">classes</span> <span class=\"operator\">=</span> Packages.scan();</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> Trunk.&lt;EventloopScanner&gt;singleton(EventloopScanner.class);</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> scanner.scan(classes);</span><br><span class=\"line\">    Assert.assertThat(ret, CoreMatchers.hasItem(TestEventloop.class));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>测试结果<br><img src=\"/images/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%92%B8%E6%A1%86%E6%9E%B6/3/testret1.png\" alt=\"运行结果\"></h2><h2 id=\"工作线程-Worker-扫描器\"><a href=\"#工作线程-Worker-扫描器\" class=\"headerlink\" title=\"工作线程(Worker)扫描器\"></a>工作线程(Worker)扫描器</h2><p>工作类负责框架各种任务的执行,具体实现同Eventloop.</p>\n<h3 id=\"辅助类-1\"><a href=\"#辅助类-1\" class=\"headerlink\" title=\"辅助类\"></a>辅助类</h3><p><strong>Worker.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.annotations;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Documented;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Inherited;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE,ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Worker &#123;</span><br><span class=\"line\">  <span class=\"type\">boolean</span> <span class=\"title function_\">ha</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">instances</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本体-1\"><a href=\"#本体-1\" class=\"headerlink\" title=\"本体\"></a>本体</h3><h2 id=\"WorkerScanner-java-测试在IScannerTest-java中追加一例测试-测试结果\"><a href=\"#WorkerScanner-java-测试在IScannerTest-java中追加一例测试-测试结果\" class=\"headerlink\" title=\"WorkerScanner.java### 测试在IScannerTest.java中追加一例测试.测试结果\"></a><strong>WorkerScanner.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.scan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.log4j.Log4j2;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.val;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.annotations.Worker;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.constant.Console;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Log4j2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WorkerScanner</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IScanner</span>&lt;Set&lt;Class&lt;?&gt;&gt;&gt; &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Set&lt;Class&lt;?&gt;&gt; scan(Set&lt;Class&lt;?&gt;&gt; classes) &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span></span><br><span class=\"line\">      classes.stream().filter(d -&gt; d.isAnnotationPresent(Worker.class)).collect(Collectors.toSet());</span><br><span class=\"line\">    log.info(Console.SCANNED, <span class=\"string\">&quot;Worker&quot;</span>, ret.size());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>### 测试<br>在<strong>IScannerTest.java</strong>中追加一例测试.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IScannerTest</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"meta\">@Worker</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestWorker</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testWorker</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">classes</span> <span class=\"operator\">=</span> Packages.scan();</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> Trunk.&lt;WorkerScanner&gt;singleton(WorkerScanner.class);</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> scanner.scan(classes);</span><br><span class=\"line\">    Assert.assertThat(ret, CoreMatchers.hasItem(TestWorker.class));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>测试结果<br><img src=\"/images/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%92%B8%E6%A1%86%E6%9E%B6/3/testret2.png\" alt=\"运行结果\"></h2><h2 id=\"Vert-x消息扫描器\"><a href=\"#Vert-x消息扫描器\" class=\"headerlink\" title=\"Vert.x消息扫描器\"></a>Vert.x消息扫描器</h2><p>在<a href=\"https://vertx.io/\">Vert.x</a>官网示例中,我们可以看到它<em>Eventloop</em>与<em>Worker</em>交互是通过vertx.eventBus()来实现的.<br>因此我们把交互消息也定义成一个类,把它也从类集合中独立出来.</p>\n<h3 id=\"辅助类-2\"><a href=\"#辅助类-2\" class=\"headerlink\" title=\"辅助类\"></a>辅助类</h3><p><strong>Receipt.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.scan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AccessLevel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.experimental.Accessors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.experimental.FieldDefaults;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Accessors(chain = true)</span></span><br><span class=\"line\"><span class=\"meta\">@FieldDefaults(level = AccessLevel.PRIVATE)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Receipt</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 承载消息的类.</span></span><br><span class=\"line\">  Object proxy;</span><br><span class=\"line\">  <span class=\"comment\">// 发布在Vert.x上的消息地址.</span></span><br><span class=\"line\">  String addr;</span><br><span class=\"line\">  <span class=\"comment\">// 具体执行的方法.</span></span><br><span class=\"line\">  Method method;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分别定义<em>EventBus</em>和<em>Addr</em>两个注解,用来标识类是否要处于Vert.x的消息队列中和类在队列上的地址.<br><strong>EventBus.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.annotations;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Documented;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Inherited;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE,ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EventBus &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Addr.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.annotations;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Documented;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Inherited;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.METHOD,ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Addr &#123;</span><br><span class=\"line\">  String <span class=\"title function_\">value</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们在之前的<em>Trunk.java</em>工厂类中添加新的方法,分别实现获取实现类和代理类的功能.<br><strong>Trunk.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Trunk</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Class&lt;?&gt; getImpl(Class&lt;?&gt; cls) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Fn.ensureRun(() -&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 搜索全部包下的类得到所有cls实现的类,必须是单实现.</span></span><br><span class=\"line\">      <span class=\"type\">val</span> <span class=\"variable\">classes</span> <span class=\"operator\">=</span> Packages.scan().stream()</span><br><span class=\"line\">        <span class=\"comment\">// 过滤掉自身以及子类</span></span><br><span class=\"line\">        .filter(d -&gt; cls.isAssignableFrom(d) &amp;&amp; d != cls)</span><br><span class=\"line\">        .collect(Collectors.toList());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span> == classes.size() ? classes.get(<span class=\"number\">0</span>) : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;, cls);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">getProxy</span><span class=\"params\">(Class&lt;?&gt; cls)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Fn.ensureRun(!cls.isInterface(),</span><br><span class=\"line\">      <span class=\"comment\">// 非接口直接单例对象</span></span><br><span class=\"line\">      () -&gt; Trunk.singleton(cls),</span><br><span class=\"line\">      () -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 接口获取其实现类</span></span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">implCls</span> <span class=\"operator\">=</span> Trunk.getImpl(cls);</span><br><span class=\"line\">        <span class=\"comment\">// 实现类不为空获取其单例对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Fn.ensureRun(() -&gt; Trunk.singleton(implCls), implCls);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本体-2\"><a href=\"#本体-2\" class=\"headerlink\" title=\"本体\"></a>本体</h3><p><strong>ReceiptScanner.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.scan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.log4j.Log4j2;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.val;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.annotations.Addr;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.annotations.EventBus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.constant.Console;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.kit.Methods;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.kit.Trunk;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Log4j2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReceiptScanner</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IScanner</span>&lt;Set&lt;Receipt&gt;&gt; &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Set&lt;Receipt&gt; <span class=\"title function_\">scan</span><span class=\"params\">(Set&lt;Class&lt;?&gt;&gt; classes)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 所有@EventBus注解的类</span></span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">eventBuses</span> <span class=\"operator\">=</span> classes.stream().filter(d -&gt; d.isAnnotationPresent(EventBus.class))</span><br><span class=\"line\">      .collect(Collectors.toSet());</span><br><span class=\"line\">    log.info(Console.SCANNED, <span class=\"string\">&quot;EventBus&quot;</span>, eventBuses.size());</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">receipts</span> <span class=\"operator\">=</span> eventBuses.stream()</span><br><span class=\"line\">      <span class=\"comment\">// 根据类下所有的方法,将其转成为Receipt对象.</span></span><br><span class=\"line\">      .flatMap(d -&gt; Arrays.stream(d.getDeclaredMethods()).filter(Methods::validateMethod))</span><br><span class=\"line\">      .map(<span class=\"built_in\">this</span>::scan).collect(Collectors.toSet());</span><br><span class=\"line\">    log.info(Console.SCANNED, <span class=\"string\">&quot;Address&quot;</span>, receipts.size());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> receipts;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Receipt <span class=\"title function_\">scan</span><span class=\"params\">(Method method)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">cls</span> <span class=\"operator\">=</span> method.getDeclaringClass();</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> Trunk.getProxy(cls);</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">addr</span> <span class=\"operator\">=</span> method.getAnnotation(Addr.class).value();</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Receipt</span>().setAddr(addr).setMethod(method)</span><br><span class=\"line\">      .setProxy(proxy);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;Address: &#123;&#125;&quot;</span>, addr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>继续在<strong>IScannerTest.java</strong>追加测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IScannerTest</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"meta\">@EventBus</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestEventBus</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Addr(&quot;test&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testReceipt</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">classes</span> <span class=\"operator\">=</span> Packages.scan();</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> Trunk.&lt;ReceiptScanner&gt;singleton(ReceiptScanner.class);</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Receipt</span>().setAddr(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">xs</span> <span class=\"operator\">=</span> scanner.scan(classes);</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> xs.stream().filter(d -&gt; data.getAddr().equals(d.getAddr())).findAny();</span><br><span class=\"line\">    Assert.assertTrue(ret.isPresent());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试结果<br><img src=\"/images/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%92%B8%E6%A1%86%E6%9E%B6/3/testret3.png\" alt=\"运行结果\"></p>\n<hr>\n<h2 id=\"依赖注入-Dependency-Injection-扫描器\"><a href=\"#依赖注入-Dependency-Injection-扫描器\" class=\"headerlink\" title=\"依赖注入(Dependency Injection)扫描器\"></a>依赖注入(Dependency Injection)扫描器</h2><p>用过spring的都知道 <em>@Resource</em> 、 <em>@Autowire</em> 注入,其中前者是jsr250的,后者是spring封装的.</p>\n<p>这里我们也可以封装一套类似于Spring的,也可以基于现有的注解开发,在这我选择基于jsr330注解开发.</p>\n<p>在core模块<strong>build.gradle</strong>中追加</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">// jsr330</span></span><br><span class=\"line\">  <span class=\"keyword\">compile</span> <span class=\"string\">&quot;javax.inject:javax.inject:1&quot;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"辅助类-3\"><a href=\"#辅助类-3\" class=\"headerlink\" title=\"辅助类\"></a>辅助类</h3><p>在<strong>Trunk.java</strong>追加一个新的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Trunk</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">// 递归查询是否有实现类</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasMatchImpl</span><span class=\"params\">(Class&lt;?&gt; cls, Class&lt;?&gt; interfaceCls)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> Arrays.asList(cls.getInterfaces()).contains(interfaceCls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!b &amp;&amp; Objects.nonNull(cls.getSuperclass()))</span><br><span class=\"line\">      b = hasMatchImpl(cls.getSuperclass(), interfaceCls);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里和Package扫描一样,类比较多,我们一个类创建一个线程来加快注入的扫描.<br><strong>DiThread.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.scan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.internal.StringUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AccessLevel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.experimental.FieldDefaults;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.log4j.Log4j2;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.val;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.constant.Console;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.kit.Trunk;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.inject.Inject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.inject.Named;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Supplier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Log4j2</span></span><br><span class=\"line\"><span class=\"meta\">@FieldDefaults(level = AccessLevel.PUBLIC, makeFinal = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DiThread</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前类</span></span><br><span class=\"line\">  Class&lt;?&gt; cls;</span><br><span class=\"line\">  <span class=\"comment\">// 所有类,需要在这里面找到当前类所有字段类型实现来注入.</span></span><br><span class=\"line\">  Set&lt;Class&lt;?&gt;&gt; classes;</span><br><span class=\"line\">  <span class=\"comment\">// 当前类所有字段的对应类型</span></span><br><span class=\"line\">  Map&lt;String, Class&lt;?&gt;&gt; FIELD_INJECTS = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">DiThread</span><span class=\"params\">(Class&lt;?&gt; cls, Set&lt;Class&lt;?&gt;&gt; classes)</span> &#123;</span><br><span class=\"line\">    setName(<span class=\"string\">&quot;ygo-di-scanner-&quot;</span> + getId());</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.cls = cls;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.classes = classes;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 类转换成类字段数组</span></span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">fields</span> <span class=\"operator\">=</span> Arrays.stream(cls.getDeclaredFields())</span><br><span class=\"line\">      <span class=\"comment\">// 过滤掉没有@Inject注解的字段</span></span><br><span class=\"line\">      .filter(field -&gt; field.isAnnotationPresent(Inject.class))</span><br><span class=\"line\">      <span class=\"comment\">// 转成 key -&gt; 类字段名 value -&gt; 字段类型的map格式 </span></span><br><span class=\"line\">      .collect((Supplier&lt;HashMap&lt;String, Class&lt;?&gt;&gt;&gt;) HashMap::<span class=\"keyword\">new</span>,</span><br><span class=\"line\">        (map, field) -&gt; map.put(field.getName(), standard(field)), HashMap::putAll);</span><br><span class=\"line\">    FIELD_INJECTS.putAll(fields);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 标准注入</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Class&lt;?&gt; standard(Field field) &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> field.getType();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!type.isInterface()) <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> field.getName();</span><br><span class=\"line\">    <span class=\"comment\">// 字段的实现列表</span></span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">impls</span> <span class=\"operator\">=</span></span><br><span class=\"line\">      classes.stream().filter(cls -&gt; Trunk.hasMatchImpl(cls, type)).collect(Collectors.toList());</span><br><span class=\"line\">    <span class=\"comment\">// 空实现</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (impls.isEmpty()) &#123;</span><br><span class=\"line\">      <span class=\"type\">val</span> <span class=\"variable\">typeName</span> <span class=\"operator\">=</span> field.getDeclaringClass().getName();</span><br><span class=\"line\">      log.error(Console.JSR330, typeName, name, type.getName());</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">val</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> impls.size();</span><br><span class=\"line\">      <span class=\"comment\">// 多实现</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"number\">1</span> != size) <span class=\"keyword\">return</span> qualifier(field, impls);</span><br><span class=\"line\">        <span class=\"comment\">// 只有一个实现</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">implCls</span> <span class=\"operator\">=</span> impls.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        log.info(Console.DI, cls, name, implCls.getName(), Inject.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> implCls;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 多实现,通过value指定实例.</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Class&lt;?&gt; qualifier(Field field, List&lt;Class&lt;?&gt;&gt; implClasses) &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">names</span> <span class=\"operator\">=</span> implClasses.stream().map(Class::getName).collect(Collectors.toList());</span><br><span class=\"line\">    log.info(Console.SCANNED, <span class=\"string\">&quot;Instance&quot;</span>, String.join(<span class=\"string\">&quot;,&quot;</span>, names));</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">qualifier</span> <span class=\"operator\">=</span> field.getAnnotation(Named.class).value();</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">cls</span> <span class=\"operator\">=</span> implClasses.stream()</span><br><span class=\"line\">      .filter(item -&gt; &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">named</span> <span class=\"operator\">=</span> item.getAnnotation(Named.class).value();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> qualifier.equals(named) &amp;&amp; !StringUtil.isNullOrEmpty(named);</span><br><span class=\"line\">      &#125;).findAny();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cls.get();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本体-3\"><a href=\"#本体-3\" class=\"headerlink\" title=\"本体\"></a>本体</h3><p><strong>DiScanner.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.btr.ygo.core.scan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.log4j.Log4j2;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.val;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.btr.ygo.core.constant.Console;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.inject.Inject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Log4j2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DiScanner</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IScanner</span>&lt;Map&lt;Class&lt;?&gt;, Map&lt;String, Class&lt;?&gt;&gt;&gt;&gt; &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Map&lt;Class&lt;?&gt;, Map&lt;String, Class&lt;?&gt;&gt;&gt; scan(Set&lt;Class&lt;?&gt;&gt; classes) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 所有包含@Inject注解字段的类</span></span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">xs</span> <span class=\"operator\">=</span> classes.stream().filter(cls -&gt; Arrays.stream(cls.getDeclaredFields())</span><br><span class=\"line\">      .anyMatch(field -&gt; field.isAnnotationPresent(Inject.class)))</span><br><span class=\"line\">      .collect(Collectors.toSet());</span><br><span class=\"line\">    <span class=\"comment\">// 一个类一个线程</span></span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">threads</span> <span class=\"operator\">=</span> xs.stream().map(cls -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">DiThread</span>(cls, classes))</span><br><span class=\"line\">      .collect(Collectors.toSet());</span><br><span class=\"line\">    <span class=\"comment\">// 线程启动</span></span><br><span class=\"line\">    threads.forEach(Thread::start);</span><br><span class=\"line\">    <span class=\"comment\">// 最终返回数据结构 key -&gt; 类类型, value -&gt; (key -&gt; 字段名, value -&gt; 字段类型).</span></span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;Class&lt;?&gt;, Map&lt;String, Class&lt;?&gt;&gt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 主线程等待子线程全部扫描完毕</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (DiThread thread : threads) thread.join();</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (DiThread thread : threads) &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> thread.cls;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> thread.FIELD_INJECTS;</span><br><span class=\"line\">        ret.put(key, value);</span><br><span class=\"line\">        log.info(Console.INJECT, key.getName(), value.size());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">      ex.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p><strong>IScannerTest.java</strong>追加</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IScannerTest</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">TestQualifier</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"meta\">@Named(&quot;testQualifierA&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestQualifierA</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">TestQualifier</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"meta\">@Named(&quot;testQualifierB&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestQualifierB</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">TestQualifier</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestDi</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestEventBus testEventBus;</span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    <span class=\"meta\">@Named(&quot;testQualifierB&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestQualifier testQualifier;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDi</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">classes</span> <span class=\"operator\">=</span> Packages.scan();</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> Trunk.&lt;DiScanner&gt;singleton(DiScanner.class);</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> scanner.scan(classes);</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> ret.get(TestDi.class);</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">type1</span> <span class=\"operator\">=</span> data.get(<span class=\"string\">&quot;testEventBus&quot;</span>);</span><br><span class=\"line\">    Assert.assertEquals(type1, TestEventBus.class);</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">type2</span> <span class=\"operator\">=</span> data.get(<span class=\"string\">&quot;testQualifier&quot;</span>);</span><br><span class=\"line\">    Assert.assertNotEquals(type2, TestQualifierA.class);</span><br><span class=\"line\">    Assert.assertEquals(type2, TestQualifierB.class);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试结果<br><img src=\"/images/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%92%B8%E6%A1%86%E6%9E%B6/3/testret4.png\" alt=\"运行结果\"></p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这一章我们基于一个扫描基类实现了各个核心组件的解耦扫描,以后有新的组件只需要自行扩展实现<em>IScanner.java</em>即可.</p>\n<p>在往后几章我们肯定还会基于这个基类继续扩展功能实现.</p>\n","text":"上一章我们已经把每个包中的类都统一加载到一个Set中了,以后凡是需要用到类的场景我们都可以从Set集合中取出,但是光这样还不够好.往后所有操作都依赖于这一个集合...","permalink":"/post/从零开始撸框架(3)-类扫描器","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"从零开始","slug":"从零开始","count":8,"path":"api/categories/从零开始.json"}],"tags":[{"name":"Vert.x","slug":"Vert-x","count":8,"path":"api/tags/Vert-x.json"},{"name":"Actor","slug":"Actor","count":8,"path":"api/tags/Actor.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"Java","slug":"Java","count":9,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%AB%E6%8F%8F%E5%9F%BA%E7%B1%BB\"><span class=\"toc-text\">扫描基类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E7%BA%BF%E7%A8%8B-Eventloop-%E6%89%AB%E6%8F%8F%E5%99%A8\"><span class=\"toc-text\">事件循环线程(Eventloop)扫描器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%85%E5%8A%A9%E7%B1%BB\"><span class=\"toc-text\">辅助类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E4%BD%93\"><span class=\"toc-text\">本体</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#EventloopScanner-java-%E6%B5%8B%E8%AF%95IScannerTest-java%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">EventloopScanner.java1234567891011121314151617181920212223package org.btr.ygo.core.scan;import lombok.extern.log4j.Log4j2;import lombok.val;import org.btr.ygo.core.annotations.Eventloop;import org.btr.ygo.core.constant.Console;import java.util.Set;import java.util.stream.Collectors;&#x2F;** * @author &lt;a href&#x3D;&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;&#x2F;a&gt; *&#x2F;@Log4j2public final class EventloopScanner implements IScanner&lt;Set&lt;Class&lt;?&gt;&gt;&gt; {  @Override  public Set&lt;Class&lt;?&gt;&gt; scan(Set&lt;Class&lt;?&gt;&gt; classes) {    val ret &#x3D;      classes.stream().filter(d -&gt; d.isAnnotationPresent(Eventloop.class)).collect(Collectors.toSet());    log.info(Console.SCANNED, &quot;Eventloop&quot;, ret.size());    return ret;  }}### 测试IScannerTest.java123456789101112131415161718192021222324252627package org.btr.ygo.core.scan;import lombok.extern.log4j.Log4j2;import lombok.val;import org.btr.ygo.core.annotations.Eventloop;import org.btr.ygo.core.kit.Packages;import org.btr.ygo.core.kit.Trunk;import org.hamcrest.CoreMatchers;import org.junit.Assert;import org.junit.Test;&#x2F;** * @author &lt;a href&#x3D;&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;&#x2F;a&gt; *&#x2F;@Log4j2public class IScannerTest {  @Eventloop  public static class TestEventloop {  }  @Test  public void testEventloop() {    val classes &#x3D; Packages.scan();    val scanner &#x3D; Trunk.&lt;EventloopScanner&gt;singleton(EventloopScanner.class);    val ret &#x3D; scanner.scan(classes);    Assert.assertThat(ret, CoreMatchers.hasItem(TestEventloop.class));  }}测试结果</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B-Worker-%E6%89%AB%E6%8F%8F%E5%99%A8\"><span class=\"toc-text\">工作线程(Worker)扫描器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%85%E5%8A%A9%E7%B1%BB-1\"><span class=\"toc-text\">辅助类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E4%BD%93-1\"><span class=\"toc-text\">本体</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#WorkerScanner-java-%E6%B5%8B%E8%AF%95%E5%9C%A8IScannerTest-java%E4%B8%AD%E8%BF%BD%E5%8A%A0%E4%B8%80%E4%BE%8B%E6%B5%8B%E8%AF%95-%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">WorkerScanner.java1234567891011121314151617181920212223package org.btr.ygo.core.scan;import lombok.extern.log4j.Log4j2;import lombok.val;import org.btr.ygo.core.annotations.Worker;import org.btr.ygo.core.constant.Console;import java.util.Set;import java.util.stream.Collectors;&#x2F;** * @author &lt;a href&#x3D;&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;&#x2F;a&gt; *&#x2F;@Log4j2public final class WorkerScanner implements IScanner&lt;Set&lt;Class&lt;?&gt;&gt;&gt; {  @Override  public Set&lt;Class&lt;?&gt;&gt; scan(Set&lt;Class&lt;?&gt;&gt; classes) {    val ret &#x3D;      classes.stream().filter(d -&gt; d.isAnnotationPresent(Worker.class)).collect(Collectors.toSet());    log.info(Console.SCANNED, &quot;Worker&quot;, ret.size());    return ret;  }}### 测试在IScannerTest.java中追加一例测试.12345678910111213public class IScannerTest {  ...  @Worker  public static class TestWorker {  }  @Test  public void testWorker() {    val classes &#x3D; Packages.scan();    val scanner &#x3D; Trunk.&lt;WorkerScanner&gt;singleton(WorkerScanner.class);    val ret &#x3D; scanner.scan(classes);    Assert.assertThat(ret, CoreMatchers.hasItem(TestWorker.class));  }}测试结果</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Vert-x%E6%B6%88%E6%81%AF%E6%89%AB%E6%8F%8F%E5%99%A8\"><span class=\"toc-text\">Vert.x消息扫描器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%85%E5%8A%A9%E7%B1%BB-2\"><span class=\"toc-text\">辅助类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E4%BD%93-2\"><span class=\"toc-text\">本体</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">测试</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5-Dependency-Injection-%E6%89%AB%E6%8F%8F%E5%99%A8\"><span class=\"toc-text\">依赖注入(Dependency Injection)扫描器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%85%E5%8A%A9%E7%B1%BB-3\"><span class=\"toc-text\">辅助类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E4%BD%93-3\"><span class=\"toc-text\">本体</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95-1\"><span class=\"toc-text\">测试</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"因雨而生","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"一直没脱离低级趣味的Coder","socials":{"github":"https://github.com/BornToRain","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"从零开始撸框架(4)-配置读取器","uid":"45dcae5ccfe9e8f63cc7cbe584bb9d7a","slug":"从零开始撸框架(4)-配置读取器","date":"2021-05-01T22:43:37.000Z","updated":"2021-05-07T01:21:36.962Z","comments":true,"path":"api/articles/从零开始撸框架(4)-配置读取器.json","keywords":["Coder","Scalaer","Javaer"],"cover":"/images/vertxlogo.png","text":"到目前为止,框架已经支持了 工厂 、 Bean分组 、 依赖注入 ,这一章我们来实现框架配置的读取. 配置读取基类老样子,我们还是先定义一个读取基类,方便后续子...","permalink":"/post/从零开始撸框架(4)-配置读取器","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"从零开始","slug":"从零开始","count":8,"path":"api/categories/从零开始.json"}],"tags":[{"name":"Vert.x","slug":"Vert-x","count":8,"path":"api/tags/Vert-x.json"},{"name":"Actor","slug":"Actor","count":8,"path":"api/tags/Actor.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"Java","slug":"Java","count":9,"path":"api/tags/Java.json"}],"author":{"name":"因雨而生","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"一直没脱离低级趣味的Coder","socials":{"github":"https://github.com/BornToRain","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"从零开始撸框架(2)-项目龙骨","uid":"1f961444d2b8322d4f975faeb98fbea1","slug":"从零开始撸框架(2)-项目龙骨","date":"2021-04-29T02:03:09.000Z","updated":"2021-06-21T14:00:35.153Z","comments":true,"path":"api/articles/从零开始撸框架(2)-项目龙骨.json","keywords":["Coder","Scalaer","Javaer"],"cover":"/images/vertxlogo.png","text":"项目结构上文说到框架包含Ioc、Di、Orm、Cache等功能,其中只有前两者为核心功能.那么结构上可以采用分包结构开发,即分为核心、组件等功能包,如下. or...","permalink":"/post/从零开始撸框架(2)-项目龙骨","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"从零开始","slug":"从零开始","count":8,"path":"api/categories/从零开始.json"}],"tags":[{"name":"Vert.x","slug":"Vert-x","count":8,"path":"api/tags/Vert-x.json"},{"name":"Actor","slug":"Actor","count":8,"path":"api/tags/Actor.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"Java","slug":"Java","count":9,"path":"api/tags/Java.json"}],"author":{"name":"因雨而生","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"一直没脱离低级趣味的Coder","socials":{"github":"https://github.com/BornToRain","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}