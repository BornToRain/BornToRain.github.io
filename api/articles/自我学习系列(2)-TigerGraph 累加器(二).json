{"title":"自我学习系列(2)-TigerGraph 累加器(二)","uid":"52761d1530e4e8e220235ce2754c2a48","slug":"自我学习系列(2)-TigerGraph 累加器(二)","date":"2021-10-19T06:43:54.000Z","updated":"2021-10-19T08:35:40.632Z","comments":true,"path":"api/articles/自我学习系列(2)-TigerGraph 累加器(二).json","keywords":["Coder","Scalaer","Javaer"],"cover":"/images/tigergraphlogo.png","content":"<h2 id=\"累加器类型\"><a href=\"#累加器类型\" class=\"headerlink\" title=\"累加器类型\"></a>累加器类型</h2><p>自定义查询中所有累加器类型</p>\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SumAccum<int></int></td>\n<td>将query中的内部状态变量不断累加</td>\n</tr>\n<tr>\n<td>MinAccum<int></int></td>\n<td>保留累加中最小的数</td>\n</tr>\n<tr>\n<td>MaxAccum<int></int></td>\n<td>保留累加中最大的数</td>\n</tr>\n<tr>\n<td>AndAccum</td>\n<td>内部布尔状态变量与新布尔状态变量与运算,默认值为false.</td>\n</tr>\n<tr>\n<td>OrAccum</td>\n<td>与AndAccum大致相同,区别在于进行或运算.</td>\n</tr>\n<tr>\n<td>ListAccum</td>\n<td>将变量累加到列表变量中</td>\n</tr>\n<tr>\n<td>@</td>\n<td>声明局部累加器</td>\n</tr>\n<tr>\n<td>@@</td>\n<td>声明全局累加器</td>\n</tr>\n</tbody></table>\n<h2 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h2><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> query accumulators<span class=\"token punctuation\">(</span>vertex<span class=\"token operator\">&lt;</span>person<span class=\"token operator\">></span> p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> graph social &#123;\n  SumAccum<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> @<span class=\"token variable\">@global_edge_cnt</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  SumAccum<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token variable\">@vertex_cnt</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  Persons <span class=\"token operator\">=</span> &#123;person<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>&#125;<span class=\"token punctuation\">;</span>\n  Ret <span class=\"token operator\">=</span> <span class=\"token keyword\">select</span> tgt \n              <span class=\"token keyword\">from</span> person:s <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> :tgt\n              <span class=\"token keyword\">where</span> s <span class=\"token operator\">=</span><span class=\"token operator\">=</span> p\n              accum tgt<span class=\"token punctuation\">.</span><span class=\"token variable\">@vertex_cnt</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>@<span class=\"token variable\">@global_edge_cnt</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">Print</span> @<span class=\"token variable\">@global_edge_cnt</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">Print</span> Ret<span class=\"token punctuation\">[</span>Ret<span class=\"token punctuation\">.</span><span class=\"token variable\">@vertex_cnt</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","feature":null,"text":"累加器类型自定义查询中所有累加器类型 关键字 作用 SumAccum 将query中的内部状态变量不断累加 MinAccum 保留累加中最小的数 MaxAccum 保留累加中最大的数 AndAccum 内部布尔状态变量与新布尔状态变量与运算,默认值为false. OrAccum ...","link":"","photos":[],"count_time":{"symbolsCount":630,"symbolsTime":"1 mins."},"categories":[{"name":"图数据库","slug":"图数据库","count":2,"path":"api/categories/图数据库.json"}],"tags":[{"name":"自我充电","slug":"自我充电","count":2,"path":"api/tags/自我充电.json"},{"name":"图数据库","slug":"图数据库","count":2,"path":"api/tags/图数据库.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B4%AF%E5%8A%A0%E5%99%A8%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">累加器类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">实践</span></a></li></ol>","author":{"name":"因雨而生","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"一直没脱离低级趣味的Coder","socials":{"github":"https://github.com/BornToRain","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"自我充电系列(1)-TigerGraph gsql101(一)","uid":"7d1ec743f1352530d9180b964a191cad","slug":"自我学习系列(1)-TigerGraph gsql101(一)","date":"2021-10-19T01:53:27.000Z","updated":"2021-10-19T06:46:05.905Z","comments":true,"path":"api/articles/自我学习系列(1)-TigerGraph gsql101(一).json","keywords":["Coder","Scalaer","Javaer"],"cover":"/images/tigergraphlogo.png","text":"前言传统数据库(RMDBS)在处理对象关系时候往往采用都是建立中间表,在中间表中记录表与表关系的方式来处理.这种方式在数据量不断增长的情况下会变得极难维护,所以 图数据库 也就应运而生. TigerGraph 是图数据库领域中的新贵,官网描述自己是”第三代”图数据库.它有着比前辈...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"图数据库","slug":"图数据库","count":2,"path":"api/categories/图数据库.json"}],"tags":[{"name":"自我充电","slug":"自我充电","count":2,"path":"api/tags/自我充电.json"},{"name":"图数据库","slug":"图数据库","count":2,"path":"api/tags/图数据库.json"}],"author":{"name":"因雨而生","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"一直没脱离低级趣味的Coder","socials":{"github":"https://github.com/BornToRain","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}