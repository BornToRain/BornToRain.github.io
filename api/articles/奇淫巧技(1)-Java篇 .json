{"title":"奇淫巧技(1)-Java篇","uid":"91972c9f8cfda280c91f3305c833ffbf","slug":"奇淫巧技(1)-Java篇 ","date":"2021-04-27T23:20:29.000Z","updated":"2021-04-28T02:08:14.834Z","comments":true,"path":"api/articles/奇淫巧技(1)-Java篇 .json","keywords":["Coder","Scalaer","Javaer"],"cover":"/images/javalogo.png","content":"<h2 id=\"编码习惯\"><a href=\"#编码习惯\" class=\"headerlink\" title=\"编码习惯\"></a>编码习惯</h2><h3 id=\"多使用值-val-而不是变量-var\"><a href=\"#多使用值-val-而不是变量-var\" class=\"headerlink\" title=\"多使用值(val)而不是变量(var)\"></a>多使用值(val)而不是变量(var)</h3><ol>\n<li>变量非线程安全,并发存在读写问题.而值因为其不可修改性天然线程安全无读写问题.多线程开发中值也不用锁,性能更优,程序猿也不用关心多线程下的并发读写锁问题,心智要求大大降低.</li>\n<li>单线程性能也更高,如图.<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  val a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  val b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> ｂ；\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n方式１编译后<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">iconst_2\n<span class=\"token comment\">// 设置a的值</span>\nistore_0\niconst_3\n<span class=\"token comment\">// 设置b的值</span>\nistore_1\n<span class=\"token comment\">// 读取a的值</span>\niload_0\n<span class=\"token comment\">// 读取b的值</span>\niload_1\niadd\nireturn<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n方式2编译后<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 常量折叠了,没有访问\"局部变量\"</span>\niconst_5\nireturn<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n不过有的场景下值与变量并无二异,比如将上图代码的常量值替换成动态计算的函数<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  val a <span class=\"token operator\">=</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  val b <span class=\"token operator\">=</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n编译后<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">invokestatic fun1<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">I</span>\n<span class=\"token comment\">// 设置a的值</span>\nistore_0\ninvokestatic fun2<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">I</span>\n<span class=\"token comment\">// 设置b的值</span>\nistore_1\n<span class=\"token comment\">// 读取a的值</span>\niload_0\n<span class=\"token comment\">// 读取b的值</span>\niload_1\niadd\nireturn<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"switch优化\"><a href=\"#switch优化\" class=\"headerlink\" title=\"switch优化\"></a>switch优化</h3><hr>\n<h2 id=\"工具jar\"><a href=\"#工具jar\" class=\"headerlink\" title=\"工具jar\"></a>工具jar</h2><h3 id=\"Lombok\"><a href=\"#Lombok\" class=\"headerlink\" title=\"Lombok\"></a>Lombok</h3><p>Lombok是一个简化Java代码的神兵利器,提供了很多非常实用的注解(并且是非运行时),能减少大量重复代码,其具体实现原理及机制在这不做展开,这里只讲应用.</p>\n<ol>\n<li>@Data 常用于开发中的Entity、VO、DTO上,会自动为其属性生成Getter、Setter函数,并覆盖实现了原生的ToString、HashCode、Equals函数.</li>\n<li>@Log4j2、Slf4j 为注解类生成一个日志静态量,名为log.</li>\n<li>@AllArgsConstructor 生成一个全参构造,一般配合构造注入使用.</li>\n<li>@Builder 设计模式中的建造者模式</li>\n<li>@Value 构建一个值对象,即类的属性都是不可变量.</li>\n<li>@Cleanup 自动为IO类型关闭资源.</li>\n<li>val Java9var的常量版本.ex: val i = 1等效于final int i = 1;.</li>\n</ol>\n<h3 id=\"Vavr\"><a href=\"#Vavr\" class=\"headerlink\" title=\"Vavr\"></a>Vavr</h3><p>Vavr为Java提供了更为强大的Fp支持,虽然比不上其他Fp语言的简单明了,但在Java也算是首屈一指的函数式第三方jar了.</p>\n<ol>\n<li>Option(单个数据处理) 相比Optional更加完备</li>\n<li>Try(异常处理)</li>\n<li>Validation(数据校验)</li>\n<li>Either(异常处理)</li>\n<li>Future(异步处理)</li>\n<li>Tuple(元祖类型)</li>\n<li>Lazy(惰性求值)</li>\n</ol>\n<p>每个函数更具体的信息官方文档都有详细介绍<a href=\"https://blog.vavr.io/\">Vavr</a></p>\n","feature":null,"text":"编码习惯多使用值(val)而不是变量(var) 变量非线程安全,并发存在读写问题.而值因为其不可修改性天然线程安全无读写问题.多线程开发中值也不用锁,性能更优,程序猿也不用关心多线程下的并发读写锁问题,心智要求大大降低. 单线程性能也更高,如图.// 1 public stati...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"奇淫巧技","slug":"奇淫巧技","count":2,"path":"api/categories/奇淫巧技.json"}],"tags":[{"name":"Java","slug":"Java","count":3,"path":"api/tags/Java.json"},{"name":"面向函数(FP)","slug":"面向函数-FP","count":1,"path":"api/tags/面向函数-FP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E7%A0%81%E4%B9%A0%E6%83%AF\"><span class=\"toc-text\">编码习惯</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E4%BD%BF%E7%94%A8%E5%80%BC-val-%E8%80%8C%E4%B8%8D%E6%98%AF%E5%8F%98%E9%87%8F-var\"><span class=\"toc-text\">多使用值(val)而不是变量(var)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#switch%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">switch优化</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E5%85%B7jar\"><span class=\"toc-text\">工具jar</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Lombok\"><span class=\"toc-text\">Lombok</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Vavr\"><span class=\"toc-text\">Vavr</span></a></li></ol></li></ol>","author":{"name":"因雨而生","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"一直没脱离低级趣味的Coder","socials":{"github":"https://github.com/BornToRain","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"奇淫巧技(2)-Jvm篇","uid":"1da24bfae57d43586cc931d1d18b42d9","slug":"奇淫巧技(2)-Jvm篇","date":"2021-04-28T00:04:30.000Z","updated":"2021-04-29T02:04:35.988Z","comments":true,"path":"api/articles/奇淫巧技(2)-Jvm篇.json","keywords":["Coder","Scalaer","Javaer"],"cover":"/images/javalogo.png","text":"函数内联在讲函数内联之前还得讲一个Jvm经常遇到的异常StackOverFlowException,该异常一般翻译成堆栈溢出异常,其实正确或者说更严谨的翻译应该是栈溢出,栈溢出大部分发生在函数的循环或递归调用之中,极少数在对象循环创建中. 函数调用过程 Jvm栈内存会存储所有热度...","link":"","photos":[],"count_time":{"symbolsCount":995,"symbolsTime":"1 mins."},"categories":[{"name":"奇淫巧技","slug":"奇淫巧技","count":2,"path":"api/categories/奇淫巧技.json"}],"tags":[{"name":"Jvm","slug":"Jvm","count":1,"path":"api/tags/Jvm.json"}],"author":{"name":"因雨而生","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"一直没脱离低级趣味的Coder","socials":{"github":"https://github.com/BornToRain","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}