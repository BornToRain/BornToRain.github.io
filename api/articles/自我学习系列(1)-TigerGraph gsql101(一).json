{"title":"自我充电系列(1)-TigerGraph gsql101(一)","uid":"7d1ec743f1352530d9180b964a191cad","slug":"自我学习系列(1)-TigerGraph gsql101(一)","date":"2021-10-19T01:53:27.000Z","updated":"2021-10-19T06:46:05.905Z","comments":true,"path":"api/articles/自我学习系列(1)-TigerGraph gsql101(一).json","keywords":["Coder","Scalaer","Javaer"],"cover":"/images/tigergraphlogo.png","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>传统数据库(RMDBS)在处理对象关系时候往往采用都是建立中间表,在中间表中记录表与表关系的方式来处理.<br>这种方式在数据量不断增长的情况下会变得极难维护,所以 <em>图数据库</em> 也就应运而生.</p>\n<p><em>TigerGraph</em> 是图数据库领域中的新贵,官网描述自己是”第三代”图数据库.它有着比前辈 <em>Neo4j</em> 更优秀的大规模图的运行处理<br>和非常强大的查询语言(gsql)和算法库,目前有开发和商用两版,以下简称为tg.</p>\n<h2 id=\"语法学习\"><a href=\"#语法学习\" class=\"headerlink\" title=\"语法学习\"></a>语法学习</h2><p><em>gsql</em> 是 <em>tg</em> 的查询语言.</p>\n<p>下面以一个标准社交网络为例进行学习.</p>\n<h3 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h3><p>图数据中有三个很重要的概念.</p>\n<ol>\n<li>顶点: 简单理解成RMDBS中的表.</li>\n<li>边: 简单理解成RMDBS中的中间关系表.</li>\n<li>图: N个顶点和N条边那么即可绘制成一张图.</li>\n</ol>\n<p>在 <em>tg</em> 中我们可以通过以下语法创建.</p>\n<h4 id=\"创建顶点\"><a href=\"#创建顶点\" class=\"headerlink\" title=\"创建顶点\"></a>创建顶点</h4><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> vertex person<span class=\"token punctuation\">(</span>\n  primary_id id string<span class=\"token punctuation\">,</span> \n  name string<span class=\"token punctuation\">,</span> \n  age <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> \n  sex string<span class=\"token punctuation\">,</span> \n  <span class=\"token keyword\">status</span> string\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>主键字段是每个顶点一定要有的唯一标识符,字段创建格式为: 字段名 字段类型.</p>\n<h4 id=\"创建边\"><a href=\"#创建边\" class=\"headerlink\" title=\"创建边\"></a>创建边</h4><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token punctuation\">[</span>undirected<span class=\"token operator\">|</span>directed<span class=\"token punctuation\">]</span> edge friendship<span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">from</span> person<span class=\"token punctuation\">,</span> \n  <span class=\"token keyword\">to</span> person<span class=\"token punctuation\">,</span> \n  sub_at <span class=\"token keyword\">datetime</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>undirected和directed代表着创建的这条边是无向还是有向的.</p>\n<h4 id=\"创建图\"><a href=\"#创建图\" class=\"headerlink\" title=\"创建图\"></a>创建图</h4><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> graph social<span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> friendship<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"加载数据\"><a href=\"#加载数据\" class=\"headerlink\" title=\"加载数据\"></a>加载数据</h3><p>创建完顶点,边,图之后,我们把demo数据加载进去看下效果.</p>\n<h4 id=\"定义加载数据任务\"><a href=\"#定义加载数据任务\" class=\"headerlink\" title=\"定义加载数据任务\"></a>定义加载数据任务</h4><p>准备demo数据<br><strong>person.csv</strong></p>\n<pre class=\"line-numbers language-csv\" data-language=\"csv\"><code class=\"language-csv\">name,sex,age,status\nTom,male,40,ca\nDan,male,34,ny\nJenny,female,25,tx\nKevin,male,28,az\nAmily,female,22,ca\nNancy,female,20,ky\nJack,male,26,fl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>friendship.csv</strong></p>\n<pre class=\"line-numbers language-csv\" data-language=\"csv\"><code class=\"language-csv\">person1,person2,date\nTom,Dan,2017-06-03\nTom,Jenny,2015-01-01\nDan,Jenny,2016-08-03\nJenny,Amily,2015-06-08\nDan,Nancy,2016-01-03\nNancy,Jack,2017-03-02\nDan,Kevin,2015-12-30<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里定义了一个名为load_social的job来为名为social的图加载数据,其中分别读取vertexfile和edgefile加载到对应的顶点和边上.</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> loading job load_social <span class=\"token keyword\">for</span> graph social &#123;\n  define filename vertexfile <span class=\"token operator\">=</span> <span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">;</span>\n  define filename edgefile <span class=\"token operator\">=</span> <span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">load</span> vertexfile <span class=\"token keyword\">to</span> vertex person <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> $<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> $<span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> $<span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">,</span> $<span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">USING</span> header<span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span> separator<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">load</span> edgefile <span class=\"token keyword\">to</span> edge friendship <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span>$<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">USING</span> header<span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span> separator<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h4 id=\"运行加载数据任务\"><a href=\"#运行加载数据任务\" class=\"headerlink\" title=\"运行加载数据任务\"></a>运行加载数据任务</h4><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">run loading job load_social<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>运行定义好的job.</p>\n<h3 id=\"查询语法\"><a href=\"#查询语法\" class=\"headerlink\" title=\"查询语法\"></a>查询语法</h3><p>通过基础语法创建了三要素(顶点, 边,图).通过定义运行加载job实现了数据的录入.</p>\n<p>现在我们来使用语法对图进行查询.</p>\n<h4 id=\"内置语法\"><a href=\"#内置语法\" class=\"headerlink\" title=\"内置语法\"></a>内置语法</h4><p>内置语法和sql都大同小异(不然也不叫gsql),这里只说明一些不同的地方.</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">// 查询总人数</span>\n<span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> person\n<span class=\"token comment\">// 查询人与人之间的关联关系,这里上头边定义是无向则是14,有向则是7.</span>\n<span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> person<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>friendship<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>person\n<span class=\"token comment\">// 从Person开始搜索Tom的所有边</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> person<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token keyword\">any</span> <span class=\"token keyword\">where</span> from_id <span class=\"token operator\">=</span><span class=\"token operator\">=</span> <span class=\"token string\">\"Tom\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em>source_type-(edge_type)-&gt;target_type</em> 这是gsql独有语法,用于描述一个边.<br>其中 <em>source_type</em> 和 <em>target_type</em>用来指定搜索方向.</p>\n<p>内置查询为了防止单次查询量过大,有以下限制:</p>\n<ol>\n<li>必须指定源顶点类型,ex: person-(any)-&gt;any</li>\n<li>必须指定from_id条件,ex: where from_id == “Tom”</li>\n</ol>\n<h4 id=\"自定义查询\"><a href=\"#自定义查询\" class=\"headerlink\" title=\"自定义查询\"></a>自定义查询</h4><p>实际应用场景中内置语法基本不太可能满足需求, <em>tg</em> 也提供了自定义查询供我们使用.</p>\n<p>在 <em>tg</em> 中使用一个自定义查询需要三步.</p>\n<ol>\n<li>根据gsql语法创建一个自定义查询.</li>\n<li>把自定义查询安装到<em>tg</em>.</li>\n<li>运行已安装的自定义查询.</li>\n</ol>\n<h5 id=\"创建自定义查询\"><a href=\"#创建自定义查询\" class=\"headerlink\" title=\"创建自定义查询\"></a>创建自定义查询</h5><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> query hello<span class=\"token punctuation\">(</span>vertex<span class=\"token operator\">&lt;</span>person<span class=\"token operator\">></span> p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> graph social &#123;\n  <span class=\"token keyword\">Start</span> <span class=\"token operator\">=</span> &#123;p&#125;<span class=\"token punctuation\">;</span>\n  Result <span class=\"token operator\">=</span> <span class=\"token keyword\">select</span> tgt \n           <span class=\"token keyword\">from</span> <span class=\"token keyword\">Start</span>:s<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>friendship:e<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>person:tgt<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">Print</span> Result<span class=\"token punctuation\">;</span>\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里定义了一个名为hello的query,我们来逐步解析它到底做了些什么.</p>\n<ol>\n<li>首先运行这个query时,接收传入的参数p(要求类型为person的顶点),将内部的Start设为p.</li>\n<li>从给定的源顶点(即传入的p)选择所有friendship的边并以person顶点结束进行查询并返回目标顶点集.</li>\n<li>将结果分别给名为Result的量并打印出来.</li>\n</ol>\n<p>这里与传统sql不同在于这一句.</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> tgt <span class=\"token keyword\">from</span> <span class=\"token keyword\">Start</span>:s<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>friendship:e<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>person:tgt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这里的<em>s</em>,<em>e</em>,<em>tgt</em>分别是源顶点,边,目标顶点的别名,明白了之后其实和sql还是没啥区别.</p>\n<h5 id=\"安装自定义查询\"><a href=\"#安装自定义查询\" class=\"headerlink\" title=\"安装自定义查询\"></a>安装自定义查询</h5><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">install query hello<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装hello到 <em>tg</em> 中,这个过程大概一分钟左右.完成之后我们就可以通过<em>tg</em>中的发布的rest接口进行查询了.</p>\n<h5 id=\"运行已安装自定义查询\"><a href=\"#运行已安装自定义查询\" class=\"headerlink\" title=\"运行已安装自定义查询\"></a>运行已安装自定义查询</h5><p>自定义查询可以通过命令行或rest接口形式进行使用.</p>\n<p><strong>gshell</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">run query hello<span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>restapi调用</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">curl -X GET &quot;http:&#x2F;&#x2F;localhost:9000&#x2F;query&#x2F;social&#x2F;hello?p&#x3D;Tom&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这里学习了gsql101相关知识,大致知道了以下几点.</p>\n<ol>\n<li>如何创建三要素(点,边,图)</li>\n<li>如何定义加载job以及加载csv数据并映射到顶点和边.</li>\n<li>如何运用内置以及自定义查询进行查询.</li>\n</ol>\n","feature":null,"text":"前言传统数据库(RMDBS)在处理对象关系时候往往采用都是建立中间表,在中间表中记录表与表关系的方式来处理.这种方式在数据量不断增长的情况下会变得极难维护,所以 图数据库 也就应运而生. TigerGraph 是图数据库领域中的新贵,官网描述自己是”第三代”图数据库.它有着比前辈...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"图数据库","slug":"图数据库","count":2,"path":"api/categories/图数据库.json"}],"tags":[{"name":"自我充电","slug":"自我充电","count":2,"path":"api/tags/自我充电.json"},{"name":"图数据库","slug":"图数据库","count":2,"path":"api/tags/图数据库.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0\"><span class=\"toc-text\">语法学习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">基础语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E9%A1%B6%E7%82%B9\"><span class=\"toc-text\">创建顶点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E8%BE%B9\"><span class=\"toc-text\">创建边</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%9B%BE\"><span class=\"toc-text\">创建图</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">加载数据</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">定义加载数据任务</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">运行加载数据任务</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">查询语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%AE%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">内置语法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">自定义查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">创建自定义查询</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">安装自定义查询</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E5%B7%B2%E5%AE%89%E8%A3%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">运行已安装自定义查询</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"因雨而生","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"一直没脱离低级趣味的Coder","socials":{"github":"https://github.com/BornToRain","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"自我学习系列(2)-TigerGraph 累加器(二)","uid":"52761d1530e4e8e220235ce2754c2a48","slug":"自我学习系列(2)-TigerGraph 累加器(二)","date":"2021-10-19T06:43:54.000Z","updated":"2021-10-19T08:35:40.632Z","comments":true,"path":"api/articles/自我学习系列(2)-TigerGraph 累加器(二).json","keywords":["Coder","Scalaer","Javaer"],"cover":"/images/tigergraphlogo.png","text":"累加器类型自定义查询中所有累加器类型 关键字 作用 SumAccum 将query中的内部状态变量不断累加 MinAccum 保留累加中最小的数 MaxAccum 保留累加中最大的数 AndAccum 内部布尔状态变量与新布尔状态变量与运算,默认值为false. OrAccum ...","link":"","photos":[],"count_time":{"symbolsCount":630,"symbolsTime":"1 mins."},"categories":[{"name":"图数据库","slug":"图数据库","count":2,"path":"api/categories/图数据库.json"}],"tags":[{"name":"自我充电","slug":"自我充电","count":2,"path":"api/tags/自我充电.json"},{"name":"图数据库","slug":"图数据库","count":2,"path":"api/tags/图数据库.json"}],"author":{"name":"因雨而生","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"一直没脱离低级趣味的Coder","socials":{"github":"https://github.com/BornToRain","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"从零开始撸框架(8)-与Vert.x集成 Web篇(二)","uid":"31ebad76ece9cbfbb4b4be8543fa818d","slug":"从零开始撸框架(8)-与Vert.x集成 Web篇(二)","date":"2021-05-12T06:33:24.000Z","updated":"2021-06-28T09:51:53.342Z","comments":true,"path":"api/articles/从零开始撸框架(8)-与Vert.x集成 Web篇(二).json","keywords":["Coder","Scalaer","Javaer"],"cover":"/images/vertxlogo.png","text":"上一篇讲完了全局配置,这一篇我们来讲每个路由的集成. Vert.x原始使用方式样例来自于Vert.x官网 Vert.x配置api接口public class TestVerticle extends AbstractVerticle &#123; public void star...","link":"","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[{"name":"从零开始","slug":"从零开始","count":8,"path":"api/categories/从零开始.json"}],"tags":[{"name":"Vert.x","slug":"Vert-x","count":8,"path":"api/tags/Vert-x.json"},{"name":"Actor","slug":"Actor","count":8,"path":"api/tags/Actor.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"Java","slug":"Java","count":9,"path":"api/tags/Java.json"},{"name":"代理模式","slug":"代理模式","count":4,"path":"api/tags/代理模式.json"}],"author":{"name":"因雨而生","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"一直没脱离低级趣味的Coder","socials":{"github":"https://github.com/BornToRain","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}