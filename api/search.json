[{"id":"7a5bf6bae3b0cd4db68a4dea467ad607","title":"点云开发(5)-滤波模块(一)","content":"前言先把工程建好.\n\n项目工程结构shellcd filter\nmkdir include\nmkdir src\ntouch CMakeLists.txt\ntouch include/pcr/filter/filter_params.hpp\ntouch include/pcr/filter/filter.hpp\ntouch src/pcr/filter/filter.cpp1. CMakeLists.txtcmake# 支持c++17的最低版本\ncmake_minimum_required(VERSION 3.10)\nproject(filter VERSION 0.1.0\n  LANGUAGES CXX\n)\n# 检查编译器是否支持C++17标准\ninclude(CheckCXXCompilerFlag)\ncheck_cxx_compiler_flag(&quot;-std=c++17&quot; COMPILER_SUPPORTS_CXX17)\n\nif(COMPILER_SUPPORTS_CXX17)\n  # 如果编译器支持C++17标准，则设置为C++17\n  set(CMAKE_CXX_STANDARD 17)\n  set(CMAKE_CXX_STANDARD_REQUIRED ON)\nendif()\n\n# 默认使用C99标准\nset(CMAKE_C_STANDARD 99)\n\n# 如果是GNU编译器或者是Clang编译器，添加警告选项\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;)\n  add_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n# 依赖库\nfind_package(PCL REQUIRED)\n\ninclude_directories(include\n  ../common/include\n  $&#123;PCL_INCLUDE_DIRS&#125;\n)\n\nadd_library(filter src/pcr/filter/filter.cpp)\n\nlink_libraries(filter $&#123;PCL_LIBRARIES&#125;)\n2. filter_params.hpp(滤波器相关结构体参数)cpp/**\n * @file filter_params.hpp\n * @author BornToRain\n * @brief 滤波器相关结构体,参数.\n * @version 0.1\n * @date 2024-03-29\n *\n * @copyright Copyright (c) 2024\n *\n */\n#pragma once\n\n#include &quot;pcr/common/macros.hpp&quot;\n\nnamespace pcr &#123;\nnamespace filter &#123;\n/**\n * @brief 滤波器参数,禁止了拷贝和复制操作,保证是单例的.\n *\n */\nstruct FilterParams &#123;\n  SINGLETON_STRUCT(FilterParams);\n&#125;;\n&#125; // namespace filter\n&#125; // namespace pcr3. filter.hpp(滤波器)cpp/**\n * @file filter.hpp\n * @author BornToRain\n * @brief 滤波器算法\n * @version 0.1\n * @date 2024-03-29\n *\n * @copyright Copyright (c) 2024\n *\n */\n#pragma once\n\nnamespace pcr &#123;\nnamespace filter &#123;&#125; // namespace filter\n&#125; // namespace pcr4. filter.cpp(滤波器)cpp#include &quot;pcr/filter/filter.hpp&quot;\n\nnamespace pcr &#123;\nnamespace filter &#123;&#125; // namespace filter\n&#125; // namespace pcr\n总结先把模块雏形建好.\n","slug":"点云开发(5)-滤波模块(一)","date":"2024-03-28T16:46:13.000Z","categories_index":"点云","tags_index":"PCL,点云,C++","author_index":"因雨而生"},{"id":"a7068a83599159beb2a7f67bcd856946","title":"点云开发(4)-通用模块(一)","content":"前言先把工程建好,把一些类型别名放进来.\n\n项目工程结构shellcd common\nmkdir include\nmkdir src\ntouch CMakeLists.txt\ntouch include/pcr/common/pcl_types.hpp\ntouch include/pcr/common/macros.hpp1. CMakeLists.txtcmake# 支持c++17的最低版本\ncmake_minimum_required(VERSION 3.10)\nproject(common VERSION 0.1.0\n  LANGUAGES CXX\n)\n# 检查编译器是否支持C++17标准\ninclude(CheckCXXCompilerFlag)\ncheck_cxx_compiler_flag(&quot;-std=c++17&quot; COMPILER_SUPPORTS_CXX17)\n\nif(COMPILER_SUPPORTS_CXX17)\n  # 如果编译器支持C++17标准，则设置为C++17\n  set(CMAKE_CXX_STANDARD 17)\n  set(CMAKE_CXX_STANDARD_REQUIRED ON)\nendif()\n\n# 默认使用C99标准\nset(CMAKE_C_STANDARD 99)\n\n# 如果是GNU编译器或者是Clang编译器，添加警告选项\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;)\n  add_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n# 依赖库\nfind_package(PCL REQUIRED)\n\ninclude_directories(include\n  $&#123;PCL_INCLUDE_DIRS&#125;\n)2. pcl_types.hpp(项目常用pcl类型别名)cpp/**\n * @file pcl_types.hpp\n * @author BornToRain\n * @brief 项目中常用pcl类型别名\n * @version 0.1\n * @date 2024-03-28\n *\n * @copyright Copyright (c) 2024\n *\n */\n#pragma once\n\n#include &quot;pcl/point_cloud.h&quot;\n#include &quot;pcl/point_types.h&quot;\n\nnamespace pcr &#123;\nnamespace common &#123;\n// 基础点云\nusing Point = pcl::PointXYZ;\n// 带强度\nusing PointI = pcl::PointXYZI;\n// 带颜色\nusing PointR = pcl::PointXYZRGB;\n\n// 基础点云\nusing PC = pcl::PointCloud&lt;Point&gt;;\n// 基础点云共享指针\nusing PCPtr = pcl::PointCloud&lt;Point&gt;::Ptr;\n// 基础点云常量指针\nusing PCCPtr = pcl::PointCloud&lt;Point&gt;::ConstPtr;\n\nusing PCI = pcl::PointCloud&lt;PointI&gt;;\nusing PCIPtr = pcl::PointCloud&lt;PointI&gt;::Ptr;\nusing PCICPtr = pcl::PointCloud&lt;PointI&gt;::ConstPtr;\n\nusing PCR = pcl::PointCloud&lt;PointR&gt;;\nusing PCRPtr = pcl::PointCloud&lt;PointR&gt;::Ptr;\nusing PCRCPtr = pcl::PointCloud&lt;PointR&gt;::ConstPtr;\n&#125; // namespace common\n&#125; // namespace pcr3. macros.hpp(宏)cpp/**\n * @file macros.hpp\n * @author BornToRain\n * @brief 宏定义\n * @version 0.1\n * @date 2024-03-29\n * \n * @copyright Copyright (c) 2024\n * \n */\n#pragma once\n\n// 单例结构体\n#define SINGLETON_STRUCT(struct_name)                  \\\n  static struct_name &amp;getInstance() &#123;                  \\\n    static struct_name instance;                       \\\n    return instance;                                   \\\n  &#125;                                                    \\\nprivate:                                               \\\n  struct_name() = default;                             \\\n  struct_name(const struct_name &amp;) = delete;           \\\n  struct_name &amp;operator=(const struct_name &amp;) = delete;\n\n总结先把通用模块雏形建好,后续写其他模块需要时再完善.\n","slug":"点云开发(4)-通用模块(一)","date":"2024-03-28T16:08:24.000Z","categories_index":"点云","tags_index":"PCL,点云,C++","author_index":"因雨而生"},{"id":"3b4cc39b0d8b1c477b709cb29e1b3058","title":"点云开发(3)-项目龙骨","content":"前言先搭建项目基础雏形,使用语言 C++17 .\n查看系统gcc|cmake版本酌情选择.\nshellgcc --version\ncmake --version\nUbuntu18建议C++11&#x2F;14,Ubuntu20建议C++11&#x2F;14&#x2F;17.\n项目工程结构shellmkdir pcr\nmkdir -p pcr/common\nmkdir -p pcr/filter\nmkdir -p pcr/segmenter\nmkdir -p pcr/tracker\nmkdir -p pcr/calculator\nmkdir -p pcr/tp_ros2\ncd pcr &amp;&amp; git init\n模块介绍common通用模块,存放一些其他模块都会用到的头文件,库函数.\nfilter滤波模块,点云滤波算法相关封装函数,主要用于点云的预处理.\nsegmenter分割模块,点云分割算法相关封装函数,主要用于点云的聚类分割,物体的算法识别&#x2F;AI模型识别.\ntracker追踪模块,点云追踪算法相关封装函数,主要用于点云分割后的识别物体追踪.\ncalculator计算模块,主要负责计算各个分割物体的属性,如表面积&#x2F;体积&#x2F;之间的距离等.\ntp_ros2与ros2交互模块,主要封装成ros2节点,从ros2中获取点云数据,进行点云处理,发布点云数据.\n\n总结先定义好工程结构,核心算法代码模块不依赖 Ros2,后续如果切换成 Ros 或其他都不影响.\n","slug":"点云开发(3)-项目龙骨","date":"2024-03-28T09:31:47.000Z","categories_index":"点云","tags_index":"点云","author_index":"因雨而生"},{"id":"946c6cbc49437cf761ffb0e5b3844f68","title":"点云开发(2)-环境搭建(Mac)","content":"前言这篇文章主要还是因为截止到24年3月为止,Ros2(其实Ros1也一样)在arm64架构的Macbook安装都过于麻烦复杂了.\n所需软件开发所需:\n\nMacOs Sonoma 14.0(操作系统)\nRos2 Humble(Robot Operating System机器人操作系统)\nPCL (Point Cloud Library 点云库)\nAnaconda或Miniconda(Python包管理工具)\n\nRos2(可选)后续可能换成 Ros 或其他.\nMac下安装Ros2过于麻烦,这里推荐使用conda方式.\n1. 下载anaconda或miniconda脚本并执行从Anaconda官网下载对应脚本\n这里我下载的是 Miniconda3-latest-MacOSX-arm64.sh\nshell# 执行后一路回车并输入yes完成安装\nsh Miniconda3-latest-MacOSX-arm64.sh2. 创建新的conda环境并切换配置shellconda create -n ros_env\nconda activate ros_env\n# 给conda源添加ros源\nconda config --env --add channels conda-forge\nconda config --env --add channels robostack-staging\nconda config --env --remove channels defaultsconda默认环境并不是ros_env,我们可以把切换环境的命令写入配置文件中来保证生效.\nshellecho &#39;conda activate ros_env&#39; &gt;&gt; ~/.bashrc3. 安装Ros2这里得看conda的robostack-staging中ros版本,截止到24年3月,对应版本是humble.\nshellconda install ros-humble-desktop4. 测试(可选)直接运行官方自带的demo即可.\nshellros2 run demo_nodes_cpp talker\nPCL1. brew安装shellbrew install pcl2. 源码安装从PCL Github下载对应版本源码(这里以1.10.0为例).\nshell# 解压源码\ntar xvf pcl-pcl-1.10.0.tar.gz\n# 在pcl下创建build目录并进入\ncd pcl-pcl-1.10.0 &amp;&amp; mkdir build &amp;&amp; cd build\n# 设置安装目录和编译版本\ncmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/pcl-1.10 ..\n# 多核编译,这里会读取服务器可用核心数.\nmake -j$(nproc)\n# 安装到前文指定的目录下\nmake install\n总结Ros2对于Mac尤其是arm架构支持非常不友好,官方不仅不提供二进制文件,连源码安装方式基本都很难跑通,所幸还有conda方法可以成功安装.\n","slug":"点云开发(2)-环境搭建(Mac)","date":"2024-03-28T08:04:10.000Z","categories_index":"点云","tags_index":"Mac,Ros2,PCL","author_index":"因雨而生"},{"id":"1e6a3f5bd40a4242218066355e4892b4","title":"点云开发(1)-环境搭建(Ubuntu)","content":"前言记录下开发环境的搭建过程.\n所需软件开发所需:\n\nUbuntu 20.04(操作系统)\nRos2 Foxy(Robot Operating System机器人操作系统)\nPCL 1.10(Point Cloud Library 点云库)\n\nRos2对Ubuntu支持最好,所以首选开发环境为Ubuntu.Ros2和Ubuntu存在版本对应关系.这里我的系统是 Ubuntu20.04,相对应的Ros2版本是 Foxy , PCL 版本为系统apt版本1.10.\nRos2(可选)后续可能换成 Ros 或其他.\n1. 添加ros软件源(中科大源)shellsudo sh -c &#39;echo &quot;deb http://mirrors.ustc.edu.cn/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#39;2. 添加密钥shellsudo apt-key adv --keyserver &#39;hkp://keyserver.ubuntu.com:80&#39; --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 3. 更新并升级apt如果源更新慢可以把apt源换成国内的,上面只把ros源替换了而已.\nshellsudo apt update &amp;&amp; sudo apt upgrade4. 安装ros24.1 完整版全家桶(包含ros2本体rviz2以及各种demo和教程)shellsudo apt install ros-foxy-desktop python3-argcomplete4.2 基础开发版(无图形化工具和相关demo教程)shellsudo apt install ros-foxy-ros-base python3-argcomplete4.3 部分非必须库(可选)shell# ros点云与pcl点云转换库\nsudo apt install ros-foxy-pcl-conversions\n# ros图像与opencv图像转换库\nsudo apt install ros-foxy-cv-bridge\n# ros与前端交互库,websocket\nsudo apt install ros-foxy-rosbridge-suite5. 测试(可选)直接运行官方自带的demo即可.\nshellros2 run demo_nodes_cpp talker6. 设置环境变量(可选)安装完成后将ros脚本添加到环境中,这样不用每次使用前都手动source\nshellecho &quot;source /opt/ros/foxy/setup.bash&quot; &gt;&gt; ~/.bashrc\nsource ~/.bashrc\nPCL1. apt安装shellsudo apt install libpcl-dev2. 源码安装从PCL Github下载对应版本源码(这里以1.10.0为例).\nshell# 解压源码\ntar xvf pcl-pcl-1.10.0.tar.gz\n# 在pcl下创建build目录并进入\ncd pcl-pcl-1.10.0 &amp;&amp; mkdir build &amp;&amp; cd build\n# 设置安装目录和编译版本\ncmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/pcl-1.10 ..\n# 多核编译,这里会读取服务器可用核心数.\nmake -j$(nproc)\n# 安装到前文指定的目录下\nmake install\n总结Ubuntu下安装Ros2和PCL整体都比较简单,唯一需要注意的国外源可能速度慢的问题,其他没啥好说的.\n","slug":"点云开发(1)-环境搭建(Ubuntu)","date":"2024-03-28T05:40:23.000Z","categories_index":"点云","tags_index":"Ros2,PCL,Ubuntu","author_index":"因雨而生"},{"id":"31ebad76ece9cbfbb4b4be8543fa818d","title":"从零开始撸框架(8)-与Vert.x集成 Web篇(二)","content":"上一篇讲完了全局配置,这一篇我们来讲每个路由的集成.\nVert.x原始使用方式样例来自于Vert.x官网\nVert.x配置api接口javapublic class TestVerticle extends AbstractVerticle &#123;\n  public void start() throws Exception &#123;\n    Router router = Router.router(vertx);\n    route().method(GET).path(&quot;/api1&quot;).consumes(&quot;app/json&quot;).produces(&quot;app/json&quot;).handler().failureHandler();\n    route().method(GET).path(&quot;/api2&quot;).consumes(&quot;app/json&quot;).produces(&quot;app/json&quot;).handler().failureHandler();\n  &#125;\n&#125;原始使用方式链式编程写起来是很方便,但是全部路由都得写在一起集中管理,对于习惯了传统模式的人很不友好,下面我们来加以改造让它更符合我们更习惯的使用方式.\n改造的话分为以下几个方面:\n\n请求路径\n请求方式\n媒体类型\n响应状态\n请求参数\nhttp工作流\n\n其中1-4为静态解析,即代码编译期我们就能确定值.5-6为动态解析,每次请求它的参数,工作流都不相同,需要我们动态解析去确定.\n下面我们先完成静态解析部分.\n静态解析请求路径首先是第一步,api请求路径解析.\n上文说到了我们会用到jsr311注解,jsr311中是使用 @Path来获取路径的,这里我们写一个工具类来解析@Path注解.Paths.java\njavapackage org.btr.ygo.web.kit;\n\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.kit.Fn;\n\nimport javax.ws.rs.Path;\nimport java.util.Objects;\n\n/**\n * 解析@Path获取请求路径\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class Paths &#123;\n  public static String resolve(Path path) &#123;\n    return resolve(path, null);\n  &#125;\n  public static String resolve(Path path, String root) &#123;\n    return Fn.ensureRun(Objects.isNull(root),\n      // 顶级路径\n      () -&gt; adjust(path.value()),\n      () -&gt; &#123;\n        // 先取上级路径\n        val rootPath = adjust(root);\n        // 当前路径\n        val subPath = adjust(path.value());\n        // 1 == /\n        return 1 == rootPath.length() ? subPath : rootPath + subPath;\n      &#125;);\n  &#125;\n  /**\n   * uri必须是/开头无/结尾,无多//形式.\n   * ex: / -&gt; /\n   * ex: /hello -&gt; /hello\n   * ex: /hello/ -&gt; /hello\n   * ex: /hello// -&gt; /hello\n   */\n  private static String adjust(String path) &#123;\n    // 多//转单/\n    var uri = path.replace(&quot;\\\\/+&quot;, &quot;/&quot;);\n    // 去尾斜杠\n    if (uri.endsWith(&quot;/&quot;)) uri = uri.substring(0, uri.lastIndexOf(&quot;/&quot;));\n    // /开头\n    return  uri.charAt(0) == &#39;/&#39; ? uri : &#39;/&#39; + uri;\n  &#125;\n&#125;请求方式解析完请求路径开始解析请求方式.jsr311请求方式注解:\n\nGET \nPOST\nPUT\nDELTE\n..\n\n在Trunk.java中追加\njavapublic final class Trunk &#123;\n  // 存放的是每个请求方式对应的请求路径集合.\n  public static final Map&lt;HttpMethod, Set&lt;String&gt;&gt; METHOD_URIS = Map.of(\n    HttpMethod.GET, new HashSet&lt;&gt;(),\n    HttpMethod.POST, new HashSet&lt;&gt;(),\n    HttpMethod.PUT, new HashSet&lt;&gt;(),\n    HttpMethod.DELETE, new HashSet&lt;&gt;(),\n    HttpMethod.PATCH, new HashSet&lt;&gt;()\n  );\n&#125;HttpMehotds.java\njavapackage org.btr.ygo.web.kit;\n\nimport io.vertx.core.http.HttpMethod;\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.kit.Fn;\nimport org.btr.ygo.core.kit.Trunk;\nimport org.btr.ygo.web.scan.Request;\n\nimport javax.ws.rs.DELETE;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.HEAD;\nimport javax.ws.rs.OPTIONS;\nimport javax.ws.rs.PATCH;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.PUT;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\nimport java.util.Map;\n\n/**\n * 解析@GET..注解获取请求方式\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class HttpMethods &#123;\n  // jsr311与Vert.x映射关系\n  private static final Map&lt;Class&lt;?&gt;, HttpMethod&gt; METHODS = Map.of(\n    GET.class, HttpMethod.GET,\n    POST.class, HttpMethod.POST,\n    PUT.class, HttpMethod.PUT,\n    DELETE.class, HttpMethod.DELETE,\n    OPTIONS.class, HttpMethod.OPTIONS,\n    PATCH.class, HttpMethod.PATCH,\n    HEAD.class, HttpMethod.HEAD\n  );\n  public static void resolve(Request req) &#123;\n    Fn.ensureExec(() -&gt; &#123;\n      val value = Trunk.METHOD_URIS.get(req.getHttpMethod());\n      value.add(req.getPath());\n    &#125;, req.getHttpMethod());\n  &#125;\n  public static HttpMethod resolve(Method method) &#123;\n    val annos = method.getDeclaredAnnotations();\n    HttpMethod ret = null;\n    for (Annotation annotation : annos) &#123;\n      val key = annotation.annotationType();\n      if (METHODS.containsKey(key)) &#123;\n        ret = METHODS.get(key);\n        break;\n      &#125;\n    &#125;\n    return ret;\n  &#125;\n&#125;媒体类型媒体类型同理,jsr311中:\n\n@Consumes 指定请求内容类型(Content-Type). ex: application&#x2F;json;\n@Produces 指定响应内容类型(Accept),不过只有当请求头中Accept包含指定类型才返回.\n\nMediaTypes.java\njavapackage org.btr.ygo.web.kit;\n\nimport lombok.val;\n\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.Produces;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport java.util.Objects;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic final class MediaTypes &#123;\n  // 默认类型 wildcard\n  private static final Set&lt;String&gt; DEFAULT = Set.of(&quot;*/*&quot;);\n  public static Set&lt;String&gt; resolveConsumes(Method method) &#123;\n    val anno = method.getAnnotation(Consumes.class);\n    return Fn.ensureRun(Objects.isNull(anno),\n      () -&gt; DEFAULT,\n      () -&gt; Arrays.stream(anno.value()).collect(Collectors.toSet()));\n  &#125;\n  public static Set&lt;String&gt; resolveProduces(Method method) &#123;\n    val anno = method.getAnnotation(Produces.class);\n    return Fn.ensureRun(Objects.isNull(anno),\n      () -&gt; DEFAULT,\n      () -&gt; Arrays.stream(anno.value()).collect(Collectors.toSet()));\n  &#125;\n&#125;\n响应状态响应状态解析于我们自定义注解ResponstStatus.java.\nResponstStatuses.java\njavapackage org.btr.ygo.web.kit;\n\nimport lombok.val;\nimport org.btr.ygo.core.kit.Fn;\nimport org.btr.ygo.web.annotations.ResponseStatus;\nimport org.btr.ygo.web.constant.HttpStatus;\n\nimport java.lang.reflect.Method;\nimport java.util.Objects;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic final class ResponstStatuses &#123;\n  // 这里默认状态返回200 Ok\n  public static HttpStatus resolveConsumes(Method method) &#123;\n    val anno = method.getAnnotation(ResponseStatus.class);\n    return Fn.ensureRun(Objects.isNull(anno), () -&gt; HttpStatus.OK, () -&gt; anno.value());\n  &#125;\n&#125;\n扫描器继承前文IScanner.java实现以下功能.\n接口扫描器扫描带 @Api的文件,将其标识为接口文件.\nApiScanner.java\njavapackage org.btr.ygo.web.scan;\n\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.constant.Console;\nimport org.btr.ygo.core.scan.IScanner;\nimport org.btr.ygo.web.annotations.Api;\n\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class ApiScanner implements IScanner&lt;Set&lt;Class&lt;?&gt;&gt;&gt; &#123;\n  @Override\n  public Set&lt;Class&lt;?&gt;&gt; scan(Set&lt;Class&lt;?&gt;&gt; classes) &#123;\n    val ret = classes.stream().filter(d -&gt; d.isAnnotationPresent(Api.class))\n      .collect(Collectors.toSet());\n    log.info(Console.SCANNED, &quot;Api&quot;, ret.size());\n    return ret;\n  &#125;\n&#125;请求扫描器把上述的静态参数扫描,将其转换成Request.java实体类.\nRequestScanner.java\njavapackage org.btr.ygo.web.scan;\n\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.annotations.Addr;\nimport org.btr.ygo.core.constant.Console;\nimport org.btr.ygo.core.constant.Const;\nimport org.btr.ygo.core.kit.Fn;\nimport org.btr.ygo.core.kit.Methods;\nimport org.btr.ygo.core.kit.Trunk;\nimport org.btr.ygo.core.scan.IScanner;\nimport org.btr.ygo.web.annotations.ResponseStatus;\nimport org.btr.ygo.web.constant.HttpStatus;\nimport org.btr.ygo.web.kit.HttpMethods;\nimport org.btr.ygo.web.kit.MediaTypes;\nimport org.btr.ygo.web.kit.Paths;\n\nimport javax.ws.rs.Path;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Set;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class RequestScanner implements IScanner&lt;List&lt;Request&gt;&gt; &#123;\n  @Override\n  public List&lt;Request&gt; scan(Set&lt;Class&lt;?&gt;&gt; classes) &#123;\n    val ret = classes.stream().flatMap(d -&gt; Fn.ensureRun(!d.isAnnotationPresent(Path.class),\n      // 顶级uri路径\n      () -&gt; extract(d, null),\n      // 非顶级uri路径\n      () -&gt; extract(d, Paths.resolve(d.getAnnotation(Path.class)))))\n      .sorted(this::sort)\n      .collect(Collectors.toList());\n    log.info(Console.SCANNED, &quot;Request&quot;, ret.size());\n    return ret;\n  &#125;\n  /**\n   * vert.x路由顺序会影响到接口\n   * 1. path参数放最后\n   * 2. 长的放最前面\n   * ex: /users/:id\n   *     /users/abc\n   *     /users\n   * ret: /users/abc\n   *      /users\n   *      /users/:id\n   */\n  private int sort(Request x, Request y) &#123;\n    val xPath = x.getPath();\n    val yPath = y.getPath();\n    var b = 0;\n    if (xPath.contains(Const.COLON)) b = 1;\n    else if (xPath.length() &gt;= yPath.length()) b = -1;\n    return b;\n  &#125;\n  private Stream&lt;Request&gt; extract(Class&lt;?&gt; cls, String root) &#123;\n    return Arrays.stream(cls.getDeclaredMethods()).filter(Methods::validateMethod)\n      .map(d -&gt; extract(d, root));\n  &#125;\n  private Request extract(Method method, String root) &#123;\n    val data = new Request().setMethod(method).setHttpMethod(HttpMethods.resolve(method))\n      .setConsumes(MediaTypes.resolveConsumes(method))\n      .setProduces(MediaTypes.resolveProduces(method));\n    val anno = method.getAnnotation(Path.class);\n    val path = Fn.ensureRun(Objects.isNull(anno),\n      () -&gt; root,\n      () -&gt; Paths.resolve(anno, root));\n    data.setPath(path);\n    data.setAddr(method.getAnnotation(Addr.class).value());\n    data.setProxy(Trunk.getProxy(method.getDeclaringClass()));\n    val httpStatus = method.getAnnotation(ResponseStatus.class);\n    // () -&gt; httpStatus.value()不能缩写成httpStatus::value,这里必须lazy.\n    data.setHttpStatus(\n      Fn.ensureRun(Objects.isNull(httpStatus), () -&gt; HttpStatus.OK, () -&gt; httpStatus.value()));\n    return data;\n  &#125;\n&#125;测试把静态部分测试一下\nIScannerTest.java\njavapackage org.btr.ygo.web.scan;\n\nimport io.vertx.core.http.HttpMethod;\nimport lombok.val;\nimport org.btr.ygo.core.annotations.Addr;\nimport org.btr.ygo.core.kit.Packages;\nimport org.btr.ygo.core.kit.Trunk;\nimport org.btr.ygo.web.annotations.Api;\nimport org.btr.ygo.web.annotations.ResponseStatus;\nimport org.btr.ygo.web.constant.HttpStatus;\nimport org.hamcrest.CoreMatchers;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport javax.ws.rs.DELETE;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.PUT;\nimport javax.ws.rs.Path;\nimport java.util.Arrays;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic class IScannerTest &#123;\n  @Api\n  @Path(&quot;/test&quot;)\n  public interface TestEventloop &#123;\n    @GET\n    @Path(&quot;/hello/:id&quot;)\n    @Addr(&quot;get&quot;)\n    void get();\n    @POST\n    @Path(&quot;/hello&quot;)\n    @Addr(&quot;post&quot;)\n    @ResponseStatus(HttpStatus.CREATED)\n    void post();\n    @PUT\n    @Path(&quot;/users/hello&quot;)\n    @Addr(&quot;put&quot;)\n    @ResponseStatus(HttpStatus.ACCEPTED)\n    void put();\n    @DELETE\n    @Path(&quot;/hello/:id&quot;)\n    @Addr(&quot;delete&quot;)\n    @ResponseStatus(HttpStatus.NO_CONTENT)\n    void delete();\n  &#125;\n  @Test\n  public void testApi() &#123;\n    val classes = Packages.scan();\n    val scanner = Trunk.&lt;ApiScanner&gt;singleton(ApiScanner.class);\n    val ret = scanner.scan(classes);\n    Assert.assertThat(ret, CoreMatchers.hasItem(TestEventloop.class));\n  &#125;\n  @Test\n  public void testRequest() &#123;\n    val classes = Packages.scan();\n    val api = Trunk.&lt;ApiScanner&gt;singleton(ApiScanner.class);\n    val scanner = Trunk.&lt;RequestScanner&gt;singleton(RequestScanner.class);\n    val ret = scanner.scan(api.scan(classes));\n    val get = new Request().setAddr(&quot;get&quot;).setPath(&quot;/test/hello/:id&quot;).setHttpMethod(HttpMethod.GET)\n      .setHttpStatus(HttpStatus.OK);\n    val post = new Request().setAddr(&quot;post&quot;).setPath(&quot;/test/hello&quot;).setHttpMethod(HttpMethod.POST)\n      .setHttpStatus(HttpStatus.CREATED);\n    val put =\n      new Request().setAddr(&quot;put&quot;).setPath(&quot;/test/users/hello&quot;).setHttpMethod(HttpMethod.PUT)\n        .setHttpStatus(HttpStatus.ACCEPTED);\n    val delete =\n      new Request().setAddr(&quot;delete&quot;).setPath(&quot;/test/hello/:id&quot;).setHttpMethod(HttpMethod.DELETE)\n        .setHttpStatus(HttpStatus.NO_CONTENT);\n    val xs = Arrays.asList(get, post, put, delete);\n    val b = ret.stream().allMatch(x -&gt; xs.stream().anyMatch(y -&gt; compare(x, y)));\n    Assert.assertTrue(b);\n  &#125;\n  private boolean compare(Request x, Request y) &#123;\n    return x.getPath().equals(y.getPath()) &amp;&amp; x.getAddr().equals(y.getAddr()) &amp;&amp;\n      x.getHttpMethod().equals(y.getHttpMethod()) &amp;&amp; x.getHttpStatus().equals(y.getHttpStatus());\n  &#125;\n&#125;测试结果\n\n动态解析请求参数请求参数解析分为两步.\n\n注解解析: 根据注解决定调用何种解析方式,最典型的例子就是分别带有 @PathParam、*@BodyParam*注解的参数.\n类型解析: 根据类型决定调用何种类型转换方式.\n\n根据上面我们可以抽象出两个接口.\n基类IParamParser.java\njavapackage org.btr.ygo.web.parse;\n\nimport io.vertx.ext.web.RoutingContext;\nimport org.btr.ygo.core.kit.Trunk;\nimport org.btr.ygo.web.annotations.BodyParam;\n\nimport java.lang.reflect.Parameter;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic interface IParamParser &#123;\n  // 表驱动模式\n  Map&lt;Class&lt;?&gt;, IParamParser&gt; MAP = new HashMap&lt;&gt;() &lt;!--swig￼0--&gt;;\n  static IParamParser get(Class&lt;?&gt; key) &#123;\n    // 找不到解析器默认采用Body解析器\n    return MAP.getOrDefault(key, Trunk.singleton(BodyParamParser.class));\n  &#125;\n  Object parse(RoutingContext context, Parameter param);\n&#125;IConvert.java\njavapackage org.btr.ygo.web.convert;\n\nimport io.vertx.core.json.JsonObject;\nimport org.btr.ygo.core.kit.Trunk;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic interface IConvert &#123;\n  // 表驱动模式\n  Map&lt;Class&lt;?&gt;, IConvert&gt; MAP = new HashMap&lt;&gt;() &lt;!--swig￼1--&gt;;\n  static IConvert get(Class&lt;?&gt; key) &#123;\n    // 找不到可用转换器,默认调用字符串转换器.\n    return MAP.getOrDefault(key, Trunk.singleton(StringConvert.class));\n  &#125;\n  Object convert(String str);\n&#125;具体实现挨个实现比较长,这里我仅以解析 @BodyParam注解和参数类型为Int的代码为例.\nIntConvert.java\njavapackage org.btr.ygo.web.convert;\n\nimport org.btr.ygo.core.kit.Fn;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic final class IntConvert implements IConvert &#123;\n  @Override\n  public Object convert(String str) &#123;\n    return Fn.ensureRun(() -&gt; Integer.parseInt(str), str);\n  &#125;\n&#125;BodyParamParser.java\njavapackage org.btr.ygo.web.parse;\n\nimport io.vertx.ext.web.RoutingContext;\nimport org.btr.ygo.web.convert.IConvert;\n\nimport java.lang.reflect.Parameter;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic final class BodyParamParser implements IParamParser &#123;\n  @Override\n  public Object parse(RoutingContext context, Parameter param) &#123;\n    // 通过字段类型找到转换器开始转换请求参数值.\n    return IConvert.get(param.getType()).convert(context.getBodyAsString());\n  &#125;\n&#125;多种注解以及类型解析只需挨个继承实现IParamParser.java和IConvert.java即可.\nhttp工作流一次http请求响应过程如下:\n\n接收请求 \n解析请求路径、方式、媒体类型等…各个参数(静态解析部分)\n调用函数处理(Async、Sync、Rx…等反射调用)\nReactor结构请求(Vert.x中用EventBus实现)\n根据请求头返回对应数据结构数据(Json、Xml、Text、二进制…不同响应策略)\n\n根据上述写出接口.\n基类响应工具类.\nResponds.java\njavapackage org.btr.ygo.web.kit;\n\nimport io.vertx.core.http.HttpServerResponse;\nimport io.vertx.ext.web.RoutingContext;\nimport lombok.val;\nimport org.btr.ygo.core.kit.Fn;\nimport org.btr.ygo.web.constant.HttpStatus;\nimport org.btr.ygo.web.scan.Request;\n\nimport java.util.Objects;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic final class Responds &#123;\n  public static void failed(RoutingContext context, Throwable ex) &#123;\n    if (Objects.nonNull(ex)) ex.printStackTrace();\n    val rep = context.response();\n    if (!rep.closed()) rep.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR.code)\n      .setStatusMessage(HttpStatus.INTERNAL_SERVER_ERROR.msg);\n  &#125;\n  public static HttpServerResponse succeed(RoutingContext context, Request req) &#123;\n    val rep = context.response();\n    return Fn.ensureRun(rep.closed(),\n      () -&gt; rep,\n      () -&gt; &#123;\n        val httpStatus = req.getHttpStatus();\n        return rep.setStatusCode(httpStatus.code).setStatusMessage(httpStatus.msg);\n      &#125;);\n  &#125;\n&#125;响应数据结构接口,根据不同结构实现不同子类.\nIRepStruct.java\njavapackage org.btr.ygo.web.struct;\n\nimport io.vertx.core.http.HttpServerResponse;\nimport org.btr.ygo.core.kit.Trunk;\n\nimport javax.ws.rs.core.MediaType;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * 响应数据结构\n * 1. Json\n * 2. Xml\n * 3. Text\n * 4. 二进制\n * ...\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic interface RepStruct &#123;\n  Map&lt;String, RepStruct&gt; MAP = new HashMap&lt;&gt;() &lt;!--swig￼2--&gt;;\n  static RepStruct get(String key) &#123;\n    return MAP.getOrDefault(key, Trunk.singleton(JsonRepStruct.class));\n  &#125;\n  void respond(HttpServerResponse rep, Object ret);\n&#125;http流接口,子类实现不同http工作流程.\nIHttpFlow.java\njavapackage org.btr.ygo.web;\n\nimport io.vertx.core.Future;\nimport io.vertx.core.Handler;\nimport io.vertx.ext.web.RoutingContext;\nimport org.btr.ygo.core.kit.Trunk;\nimport org.btr.ygo.web.scan.Request;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * http工作流\n * 1. 接收请求\n * 2. 解析请求路径、方式、媒体类型等...各个参数\n * 3. 调用函数处理(Async、Sync、Rx...)\n * 4. Reactor结构请求(Vert.x中用EventBus实现)\n * 5. 根据请求头返回对应数据结构数据(Json、Xml、Text、二进制...)\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic interface IFlow &#123;\n  Map&lt;Class&lt;?&gt;, IFlow&gt; MAP = new HashMap&lt;&gt;() &lt;!--swig￼3--&gt;;\n  static IFlow get(Class&lt;?&gt; key) &#123;\n    return MAP.getOrDefault(key, Trunk.singleton(FutureFlow.class));\n  &#125;\n  Handler&lt;RoutingContext&gt; handle(Request req);\n&#125;具体实现这里仅实现Vert.x中的Future响应流与Json数据结构.\nJsonRepStruct.java\njavapackage org.btr.ygo.web.struct;\n\nimport io.vertx.core.http.HttpServerResponse;\nimport io.vertx.core.json.Json;\nimport org.btr.ygo.core.kit.Fn;\n\nimport java.util.Objects;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic final class JsonRepStruct implements RepStruct &#123;\n  @Override\n  public void respond(HttpServerResponse rep, Object ret) &#123;\n    Fn.ensureRun(Objects.nonNull(ret), () -&gt; rep.end(Json.encode(ret)), rep::end);\n  &#125;\n&#125;FutureHttpFlow.java\njavapackage org.btr.ygo.web.flow;\n\nimport io.vertx.core.Handler;\nimport io.vertx.ext.web.RoutingContext;\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.constant.Console;\nimport org.btr.ygo.core.constant.Const;\nimport org.btr.ygo.core.kit.Fn;\nimport org.btr.ygo.core.kit.Reflect;\nimport org.btr.ygo.core.kit.Verticles;\nimport org.btr.ygo.web.kit.Responds;\nimport org.btr.ygo.web.parse.IParamParser;\nimport org.btr.ygo.web.scan.Request;\nimport org.btr.ygo.web.struct.RepStruct;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class FutureFlow implements IFlow &#123;\n  @Override\n  public Handler&lt;RoutingContext&gt; handle(Request req) &#123;\n    return context -&gt; &#123;\n      // 1. 解析参数\n      val args = IParamParser.parseArgs(context, req);\n      // 2. 调用函数(Async,Sync,Rx...)\n      val method = req.getMethod();\n      val methodName = method.getName();\n      val ret = Reflect.invokeMethod(req.getProxy(), methodName, args);\n      log.info(Console.INVOKE, method.getDeclaringClass(), methodName, Fn.join(Const.COMMA, args));\n      // 3. event-bus请求(reactor结构)\n      val future = context.vertx().eventBus().request(req.getAddr(), ret, Verticles.delivery());\n      future.onComplete(ar -&gt; &#123;\n        if (ar.failed()) Responds.failed(context, ar.cause());\n        else &#123;\n          // 4. 响应数据结构(Json,Xml,Text...)\n          val struct = RepStruct.get(context.getAcceptableContentType());\n          struct.respond(Responds.succeed(context, req), ar.result().body());\n        &#125;\n      &#125;);\n    &#125;;\n  &#125;\n&#125;重构前文的EventloopHttpActor.java,把动态参数解析加上.\nEventloopHttpActor.java\njavapackage org.btr.ygo.web.actor;\n\nimport io.vertx.core.AbstractVerticle;\nimport io.vertx.core.http.HttpMethod;\nimport io.vertx.core.http.HttpServerOptions;\nimport io.vertx.ext.web.Route;\nimport io.vertx.ext.web.Router;\nimport io.vertx.ext.web.handler.BodyHandler;\nimport io.vertx.ext.web.handler.CorsHandler;\nimport io.vertx.ext.web.handler.ResponseContentTypeHandler;\nimport io.vertx.ext.web.handler.SessionHandler;\nimport io.vertx.ext.web.handler.TimeoutHandler;\nimport io.vertx.ext.web.sstore.ClusteredSessionStore;\nimport io.vertx.ext.web.sstore.LocalSessionStore;\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.annotations.Eventloop;\nimport org.btr.ygo.core.constant.Const;\nimport org.btr.ygo.core.kit.Trunk;\nimport org.btr.ygo.web.config.CorsConfig;\nimport org.btr.ygo.web.config.Server;\nimport org.btr.ygo.web.constant.Console;\nimport org.btr.ygo.web.flow.IFlow;\nimport org.btr.ygo.web.kit.Deck;\nimport org.btr.ygo.web.kit.Network;\nimport org.btr.ygo.web.scan.Request;\n\nimport java.lang.reflect.Method;\nimport java.util.Objects;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\n@Eventloop\npublic final class EventloopHttpActor extends AbstractVerticle &#123;\n  @Override\n  public void start() throws Exception &#123;\n    Deck.HTTP_SERVERS.forEach((port, config) -&gt; &#123;\n      val router = Router.router(vertx);\n      configRouter(router);\n      configRequest(router);\n      server(router, port, config);\n    &#125;);\n  &#125;\n  private void configRouter(Router router) &#123;\n    val store =\n      vertx.isClustered() ? ClusteredSessionStore.create(vertx) : LocalSessionStore.create(vertx);\n    val cors = Trunk.&lt;CorsConfig&gt;singleton(CorsConfig.class).read();\n    // POST|PUT请求才接收body,其他不接收解析更快.\n    router.route().method(HttpMethod.POST).method(HttpMethod.PUT).handler(BodyHandler.create())\n      // 全局默认超时: 5s\n      .handler(TimeoutHandler.create())\n      .handler(ResponseContentTypeHandler.create())\n      .handler(SessionHandler.create(store))\n      // 跨域\n      .handler(CorsHandler.create(cors.getOrigin()).allowCredentials(cors.getAllowCredentials())\n        .allowedHeaders(cors.getAllowedHeaders()).allowedMethods(cors.getAllowedMethods()));\n  &#125;\n  private void server(Router router, Integer port, Server config) &#123;\n    val options = new HttpServerOptions(config.getOptions());\n    vertx.createHttpServer(options).requestHandler(router).listen();\n    // 发布api地址\n    val path = &quot;http://&quot; + Network.getIPv4() + Const.COLON + port + Const.SLASH;\n    log.info(Console.SERVER, getClass().getSimpleName(), Const.HTTP, path);\n  &#125;\n  private void configRequest(Router router) &#123;\n    Deck.REQUESTS.forEach(req -&gt; &#123;\n      val route = router.route(req.getHttpMethod(), req.getPath());\n      timeoutIf(req, route);\n      mediaTypeIf(req, route);\n      setHandler(req, route);\n    &#125;);\n  &#125;\n  private void timeoutIf(Request req, Route route) &#123;\n    val timeout = req.getTimeout();\n    if (Objects.nonNull(timeout) &amp;&amp; timeout &gt; 0) route.handler(TimeoutHandler.create(timeout));\n  &#125;\n  private void mediaTypeIf(Request req, Route route) &#123;\n    req.getConsumes().forEach(route::consumes);\n    req.getProduces().forEach(route::produces);\n  &#125;\n  private void setHandler(Request req, Route route) &#123;\n    val method = findReceipter(req);\n    // TODO 目前只支持Async/Sync\n    val handler = IFlow.get(method.getReturnType()).handle(req);\n    route.handler(handler);\n  &#125;\n  private Method findReceipter(Request req) &#123;\n    val addr = req.getAddr();\n    val receipt =\n      Trunk.RECEIPTS.stream().filter(d -&gt; d.getAddr().equals(addr))\n        .findAny().orElseThrow(() -&gt; new NullPointerException(\n        &quot;No method under the @EventBus class for the @Addr annotation value &quot; + addr +\n          &quot; was found&quot;));\n    return receipt.getMethod();\n  &#125;\n&#125;\n总结这一篇我们把Vert.x中路由使用改造成我们最熟悉的Spring注解式开发模式了,以后使用的话更加顺手习惯.\n","slug":"从零开始撸框架(8)-与Vert.x集成 Web篇(二)","date":"2021-05-12T06:33:24.000Z","categories_index":"从零开始","tags_index":"Vert.x,Actor,设计模式,Java,代理模式","author_index":"因雨而生"},{"id":"c38b17588d251cd9846139dacf4f50ed","title":"从零开始撸框架(7)-与Vert.x集成 Web篇(一)","content":"上一篇讲完了与Vert.x集成的整体情况,这一篇开始与vertx-web集成.\n这些内容我们主要在web模块中进行开发.\nWeb全局集成web组件下的build.gradlebuild.gradle\ntxtdependencies &#123;\n  // 核心组件\n  compile project(&quot;:core&quot;)\n  compile &quot;io.vertx:vertx-web:$vertxVersion&quot;\n    // jsr311\n    &quot;javax.ws.rs:javax.ws.rs-api:2.1.1&quot;\n&#125;注解核心组件注解我们是基于jsr330,web组件这我们基于jsr311+自定义注解.\n字段级\n@PathParam 原生注解,获取地址栏参数.\n@QueryParam 原生注解,获取QuerySring.\n@CookieParam 原生注解,获取Cookie.\n@HeaderParam 原生注解,获取Header.\n@BodyParam 自定义注解,获取请求体,与Spring中的 @RequestBody 同含义.\n@SessionParam 自定义注解,获取Session.\n@ResponseStatus 自定义注解,设置默认响应http状态码.\n\n这里只放出自定义注解代码.BodyParam.java\njavapackage org.btr.ygo.web.annotations;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Inherited\n@Documented\n@Target(&#123;ElementType.PARAMETER, ElementType.ANNOTATION_TYPE&#125;)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface BodyParam &#123;\n&#125;SessionParam.java\njavapackage org.btr.ygo.web.annotations;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Inherited\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(&#123;ElementType.PARAMETER, ElementType.ANNOTATION_TYPE&#125;)\npublic @interface SessionParam &#123;\n  String value();\n&#125;ResponseStatus.java\njavapackage org.btr.ygo.web.annotations;\n\nimport org.btr.ygo.web.constant.HttpStatus;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Inherited\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(&#123;ElementType.METHOD,ElementType.TYPE, ElementType.ANNOTATION_TYPE&#125;)\npublic @interface ResponseStatus &#123;\n  HttpStatus value() default HttpStatus.INTERNAL_SERVER_ERROR;\n  HttpStatus code() default HttpStatus.INTERNAL_SERVER_ERROR;\n  String msg() default &quot;&quot;;\n&#125;类级\n@Api 自定义注解,标识当前类是一个Api,与Spring中的 @Controller 同含义.\n\nApi.java\njavapackage org.btr.ygo.annotations;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Inherited\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(&#123;ElementType.TYPE,ElementType.ANNOTATION_TYPE&#125;)\npublic @interface Api &#123;\n&#125;配置web服务配置多种多样,我们也需要定义对应的实体类.\ncors配置对象Cors.java\njava\npackage org.btr.ygo.web.config;\n\nimport io.vertx.core.http.HttpMethod;\nimport lombok.AccessLevel;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\nimport lombok.experimental.FieldDefaults;\n\nimport java.util.Set;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Data\n@Accessors(chain = true)\n@FieldDefaults(level = AccessLevel.PRIVATE)\npublic class Cors &#123;\n  String origin;\n  Boolean allowCredentials;\n  Set&lt;HttpMethod&gt; allowedMethods;\n  Set&lt;String&gt; allowedHeaders;\n&#125;配置读取CorsConfig.java\njavapackage org.btr.ygo.web.config;\n\nimport io.vertx.core.http.HttpMethod;\nimport io.vertx.core.json.JsonArray;\nimport io.vertx.core.json.JsonObject;\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.config.IConfig;\nimport org.btr.ygo.core.config.YgoConfig;\nimport org.btr.ygo.core.constant.Const;\nimport org.btr.ygo.core.kit.Trunk;\n\nimport java.util.Set;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class CorsConfig implements IConfig&lt;Cors&gt; &#123;\n  @Override\n  public Cors read() &#123;\n    val config = Trunk.&lt;YgoConfig&gt;singleton(YgoConfig.class).read();\n    return read(config.getJsonObject(Const.VERTX).getJsonObject(&quot;cors&quot;));\n  &#125;\n  public Cors read(JsonObject json) &#123;\n    return new Cors().setOrigin(json.getString(&quot;origin&quot;))\n      .setAllowCredentials(json.getBoolean(&quot;allow-credentials&quot;))\n      .setAllowedHeaders(toSet(json.getJsonArray(&quot;allowed-headers&quot;), Object::toString))\n      .setAllowedMethods(toSet(json.getJsonArray(&quot;allowed-methods&quot;),\n          d -&gt; new HttpMethod(d.toString().toUpperCase())));\n  &#125;\n  private &lt;T&gt; Set&lt;T&gt; toSet(JsonArray xs, Function&lt;Object, T&gt; fn) &#123;\n    return xs.stream().map(fn).collect(Collectors.toSet());\n  &#125;\n&#125;配置示例application.yaml\nyamlygo:\n  profile: default\n  vertx:\n    name: vertx-ygo\n    options:\n      haEnabled: false\n      preferNativeTransport: true\n    cors:\n      origin: &quot;*&quot;\n      allow-credentials: true\n      allowed-methods:\n        - GET\n        - POST\n        - PUT\n        - DELETE\n        - PATCH\n        - OPTIONS\n        - HEAD\n      allowed-headers:\n        - Content-Type类、配置定义一个对象,用来装请求的各种参数.\nRequest.java\njavapackage org.btr.ygo.web.scan;\n\nimport io.vertx.core.http.HttpMethod;\nimport lombok.AccessLevel;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\nimport lombok.experimental.FieldDefaults;\nimport org.btr.ygo.web.constant.HttpStatus;\n\nimport java.lang.reflect.Method;\nimport java.util.Set;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Data\n@Accessors(chain = true)\n@FieldDefaults(level = AccessLevel.PRIVATE)\npublic class Request &#123;\n  // 请求uri路径.\n  String path;\n  HttpMethod httpMethod;\n  HttpStatus httpStatus;\n  Long timeout;\n  // 对应类中所需要执行的函数\n  Method method;\n  Set&lt;String&gt; consumes;\n  Set&lt;String&gt; produces;\n  // 代理类,一般是XxxApi,XxxController,XxxAgent.\n  Object proxy;\n  // 对应EventBus中的地址.\n  String addr;\n&#125;Deck.java追加\nDeck.java\njavapublic final class Deck &#123;\n  // 所有包含@Api注解类\n  public static final Set&lt;Class&lt;?&gt;&gt; APIS = new HashSet&lt;&gt;();\n  // 所有的\n  public static final List&lt;Request&gt; REQUESTS = new ArrayList&lt;&gt;();\n&#125;把上一篇中的EventloopHttpActor.java重构一下. 在里面把Router全局配置加上.EventloopHttpActor.java\njavapublic final class EventloopHttpActor extends AbstractVerticle &#123;\n  @Override\n  public void start() throws Exception &#123;\n    Deck.HTTP_SERVERS.forEach((port, config) -&gt; &#123;\n      val router = Router.router(vertx);\n      configRouter(router);\n      server(router, port, config);\n    &#125;);\n  &#125;\n  // router的整体参数配置\n  private void configRouter(Router router) &#123;\n    // 集群还是本地存储\n    val store =\n      vertx.isClustered() ? ClusteredSessionStore.create(vertx) : LocalSessionStore.create(vertx);\n    val cors = Trunk.&lt;CorsConfig&gt;singleton(CorsConfig.class).read();\n    // POST|PUT请求才接收body,其他不接收解析更快.\n    router.route().method(HttpMethod.POST).method(HttpMethod.PUT).handler(BodyHandler.create())\n      // 全局默认超时: 5s\n      .handler(TimeoutHandler.create())\n      .handler(ResponseContentTypeHandler.create())\n      .handler(SessionHandler.create(store))\n      // 跨域\n      .handler(CorsHandler.create(cors.getOrigin()).allowCredentials(cors.getAllowCredentials())\n        .allowedHeaders(cors.getAllowedHeaders()).allowedMethods(cors.getAllowedMethods()));\n  &#125;\n  ...\n&#125; \n总结这一篇完成了vertx-web的全局配置,使用时会应用到vertx-web下的所有请求.\n","slug":"从零开始撸框架(7)-与Vert.x集成 Web篇(一)","date":"2021-05-10T06:50:32.000Z","categories_index":"从零开始","tags_index":"Vert.x,Actor,设计模式,Java,代理模式","author_index":"因雨而生"},{"id":"a0a429763c9944ec54d86de5e0e4f445","title":"从零开始撸框架(6)-与Vert.x集成 基础篇(二)","content":"这一章我们来将上一章中的 Verticle 在Vert.x中运行起来.\nVert.x原始使用方式样例来自于Vert.x官网\n部署Verticle并运行Vert.xjavapublic class HelloWorld &#123;\n  public static void main() &#123;\n    // 单例\n    // Vertx vertx = Vertx.vertx();\n    // 集群\n    Vertx.clusteredVertx(options, ar -&gt; &#123;\n      val vertx = ar.result();\n      vertx.deployVerticle(Server.class.getName());\n    &#125;);\n  &#125;\n&#125;这里贴出来方便参考,下面开始与Vert.x的集成.\nVert.x集成基类辅助类线程类,单纯为了打印线程名.可省略\nThreads.java\njavapackage org.btr.ygo.web.kit;\n\nimport lombok.val;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic final class Threads &#123;\n  public static void run(Runnable runnable, String name) &#123;\n    val thread = new Thread(runnable);\n    thread.setName(name + &quot;-&quot; + thread.getId());\n    thread.start();\n  &#125;\n&#125;\n本体框架启动入口类\nILauncher.java\njavapackage org.btr.ygo.web;\n\nimport io.vertx.core.Vertx;\n\nimport java.util.function.Consumer;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic interface ILauncher &#123;\n  /**\n   * 这里为什么要采用Java8的Consumer为参数,而不是Vertx或者Supplier&lt;Vertx&gt;呢.\n   * 1. 这里我们希望Vert.x是子类去创建(单例、集群)Vert.x,而不是外界创建好后传进来. start(Vertx vertx); (×)\n   * 2. 创建的Vert.x我们后续会用到,所以需要返回或者能使用到,\n   *    而单例、集群模式的Vert.x返回值一个Sync一个Future,用Supplier&lt;Vertx&gt;不好操作. start(Supplier&lt;Vertx&gt; fn); (×) \n   */\n  void start(Consumer&lt;Vertx&gt; fn);\n&#125;ActorLauncher.java\njavapackage org.btr.ygo.web;\n\nimport io.netty.util.internal.logging.InternalLoggerFactory;\nimport io.netty.util.internal.logging.Log4J2LoggerFactory;\nimport io.vertx.core.Vertx;\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.config.VertxConfig;\nimport org.btr.ygo.core.kit.Fn;\nimport org.btr.ygo.core.kit.Trunk;\nimport org.btr.ygo.web.constant.Console;\n\nimport java.util.function.Consumer;\n\nimport static io.vertx.core.spi.resolver.ResolverProvider.DISABLE_DNS_RESOLVER_PROP_NAME;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class ActorLauncher implements ILauncher &#123;\n  @Override\n  public void start(Consumer&lt;Vertx&gt; fn) &#123;\n    // 读取Vert.x相关配置\n    val config = Trunk.&lt;VertxConfig&gt;singleton(VertxConfig.class);\n    val options = config.read();\n    // 将Vert.x的日志换成Log4j2\n    InternalLoggerFactory.setDefaultFactory(Log4J2LoggerFactory.INSTANCE);\n    // 墙,dns解析最好关掉.\n    System.getProperties().setProperty(DISABLE_DNS_RESOLVER_PROP_NAME, &quot;true&quot;);\n    Fn.ensureExec(!options.isHAEnabled(),\n      // 单例\n      () -&gt; &#123;\n        log.info(Console.SINGLE, options.toJson().encodePrettily());\n        fn.accept(Vertx.vertx(options));\n      &#125;,\n      // 集群\n      () -&gt; &#123;\n        val manager = options.getClusterManager();\n        log.info(Console.LAUNCHER, manager, manager.getNodeId(), manager.isActive());\n        Vertx.clusteredVertx(options, ar -&gt; &#123;\n          val vertx = ar.result();\n          fn.accept(vertx);\n        &#125;);\n      &#125;);\n  &#125;\n&#125;启动入口模仿Spring-boot 的SpringApplication.run写一个.\nVertxBootstrap.java\njavapackage org.btr.ygo.web;\n\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.actor.EventloopActor;\nimport org.btr.ygo.core.actor.WorkerActor;\nimport org.btr.ygo.core.kit.Trunk;\nimport org.btr.ygo.web.kit.Threads;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class VertxBootstrap &#123;\n  public static void run() &#123;\n    new VertxBootstrap().start();\n  &#125;\n  public void start() &#123;\n    val launcher = Trunk.&lt;ActorLauncher&gt;singleton(ActorLauncher.class);\n    launcher.start(vertx -&gt; &#123;\n      Threads.run(() -&gt; &#123;\n        val master = Trunk.&lt;EventloopActor&gt;singleton(EventloopActor.class);\n        master.integration(vertx);\n      &#125;, &quot;ygo-eventloop-thread&quot;);\n      Threads.run(() -&gt; &#123;\n        val worker = Trunk.&lt;WorkerActor&gt;singleton(WorkerActor.class);\n        worker.integration(vertx);\n      &#125;, &quot;ygo-worker-thread&quot;);\n    &#125;);\n  &#125;\n&#125;测试在 &#x2F;test&#x2F;main&#x2F;resources 、 &#x2F;test&#x2F;main&#x2F;resources&#x2F;ygo&#x2F; 目录下分别添加 application.yaml 文件.application.yaml\nyamlygo:\n  name: test\n  profile: default\n  vertx:\n    name: vertx-ygo\n    options:\n      haEnabled: false\n      preferNativeTransport: true启动测试类VertxBootstrapTest.java\njavapackage org.btr.ygo.web;\n\nimport org.junit.Test;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic class VertxBootstrapTest &#123;\n  @Test\n  public void test() &#123;\n    VertxBootstrap.run();\n  &#125;\n&#125;测试结果\n总结到此框架与Vert.x基础集成完成了,现在框架中的类、配置已经被识别成Verticle并运行在Vert.x中了.\n下一篇我们就要开始集成Vert.x-web来实现框架Web部分的功能了.\n","slug":"从零开始撸框架(6)-与Vert.x集成 基础篇(二)","date":"2021-05-07T03:54:00.000Z","categories_index":"从零开始","tags_index":"Vert.x,Actor,设计模式,Java,代理模式","author_index":"因雨而生"},{"id":"6b0291adc1983f086f545c1304c40edc","title":"从零开始撸框架(5)-与Vert.x集成 基础篇(一)","content":"前两章我们分别讲完了类、配置,让框架有了骨架.接下来几章我们要实现类、配置与Vert.x集成,让框架跑在Vert.x中.\n由于接下来会设计到对外提供web服务了,篇幅会比较长.这里我决定分篇,第一篇先把大体的讲完,剩下几篇再讲web方面的细节.\nVert.x原始使用方式样例来自于Vert.x官网\n编写Verticlejavaimport io.vertx.core.AbstractVerticle;\n\npublic class Server extends AbstractVerticle &#123;\n  public void start() &#123;\n    vertx.createHttpServer().requestHandler(req -&gt; &#123;\n      req.response()\n        .putHeader(&quot;content-type&quot;, &quot;text/plain&quot;)\n        .end(&quot;Hello from Vert.x!&quot;);\n    &#125;).listen(8080);\n  &#125;\n&#125;这里贴出来方便参考,下面开始与Vert.x的集成.\n\nVert.x集成基类辅助类工具集成中,不管是 Eventloop 还是 Worker 都会用到一些重复的方法,只是部分参数不同,我们把它做成工具类.Verticles.java\njavapackage org.btr.ygo.core.kit;\n\nimport io.vertx.core.DeploymentOptions;\nimport io.vertx.core.Vertx;\nimport io.vertx.core.eventbus.DeliveryOptions;\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.constant.Console;\nimport org.btr.ygo.core.constant.Const;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\n/**\n * Vert.x Vertcile部署\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class Verticles &#123;\n  // value - verticle id\n  private static final Map&lt;Class&lt;?&gt;, String&gt; VERTICLES = new HashMap&lt;&gt;();\n  private static String flag(boolean isWorker) &#123;\n    return isWorker ? Const.WORKER : Const.EVENTLOOP;\n  &#125;\n  public static void deploy(Vertx vertx, DeploymentOptions options, Class&lt;?&gt; cls) &#123;\n    val name = cls.getName();\n    val flag = flag(options.isWorker());\n    vertx.deployVerticle(cls.getName(), options, ar -&gt; &#123;\n      val id = ar.result();\n      val instances = options.getInstances();\n      if (ar.succeeded()) &#123;\n        log.info(Console.DEPLOYED_S, flag, name, instances, id);\n        VERTICLES.put(cls, id);\n      &#125;\n      else &#123;\n        val cause = ar.cause();\n        if (Objects.nonNull(cause)) cause.printStackTrace();\n        val msg = Objects.isNull(cause) ? null : cause.getMessage();\n        log.warn(Console.DEPLOYED_F, flag, name, id, instances, msg);\n      &#125;\n    &#125;);\n  &#125;\n  public static void undeploy(Vertx vertx, Class&lt;?&gt; cls, String flag) &#123;\n    val id = VERTICLES.get(cls);\n    val name = cls.getName();\n    vertx.undeploy(id, ar -&gt; &#123;\n      if (ar.succeeded()) log.info(Console.UNDEPLOYED_S, flag, name, id);\n      else &#123;\n        val cause = ar.cause();\n        if (Objects.nonNull(cause)) cause.printStackTrace();\n        val msg = Objects.isNull(cause) ? null : cause.getMessage();\n        log.warn(Console.UNDEPLOYED_F, flag, name, id, msg);\n      &#125;\n    &#125;);\n  &#125;\n  public static DeliveryOptions delivery() &#123;\n    return new DeliveryOptions();\n  &#125;\n&#125;类、配置当然也会用到我们之前加载好的类、配置.Trunk.java\njavapublic final class Trunk &#123;\n  ...\n  // 所有@Eventloop类\n  public static final Set&lt;Class&lt;?&gt;&gt; EVENTLOOPS = new HashSet&lt;&gt;();\n  // 所有@Worker类\n  public static final Set&lt;Class&lt;?&gt;&gt; WORKERS = new HashSet&lt;&gt;();\n  // 所有Vert.x EventBus上的对象\n  public static final Set&lt;Receipt&gt; RECEIPTS = new HashSet&lt;&gt;();\n  ...\n&#125;Deck.java\njavapublic final class Deck &#123;\n  ...\n  // 所有http服务配置\n  public static final Map&lt;Integer, Server&gt; HTTP_SERVERS = new HashMap&lt;&gt;();\n  // 所有tcp服务配置\n  public static final Map&lt;Integer, Server&gt; NET_SERVERS = new HashMap&lt;&gt;();\n  ...\n&#125;Reflect.java\njavapublic final class Reflect &#123;\n  ...\n  private static final Map&lt;Class&lt;?&gt;, MethodAccess&gt; METHODS = new HashMap&lt;&gt;();\n  // 反射执行对应的方法\n  public static &lt;T&gt; T invokeMethod(Object instance, String name, Object... args) &#123;\n    return Fn.ensureRun(() -&gt; &#123;\n      val instanceCls = instance.getClass();\n      val access = Fn.pool(METHODS, instanceCls, () -&gt; MethodAccess.get(instanceCls));\n      return (T) access.invoke(instance, name, args);\n    &#125;, instance, name);\n  &#125;\n&#125;本体IActor是框架与Vert.x的连接桥梁,子类继承该类就可以获得Vert.x框架中的Vert.x对象.\nIActor.java\njavapackage org.btr.ygo.core.actor;\n\nimport io.vertx.core.Vertx;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic interface IActor &#123;\n  void integration(Vertx vertx);\n&#125;Vert.x中最小工作单位Verticle为一个类,它的配置参数io.vertx.core.DeploymentOptions就是根据该类获取的,这里我们可以得出一个Verticle配置参数提取基类.\nIExtractor.java\njavapackage org.btr.ygo.core.actor;\n\nimport io.vertx.core.DeploymentOptions;\n\n/**\n * 根据类名获取相应的配置\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic interface IExtractor &#123;\n  DeploymentOptions extract(Class&lt;?&gt; cls);\n&#125;Vert.x通信是通过eventbus交互的,这里我们也抽象出一个基类,后续可以实现异步(Future)、同步(Sync)、响应式(Rx)应答,当前我们仅实现Future.\nIReplier.java\njavapackage org.btr.ygo.core.actor;\n\nimport io.vertx.core.Future;\nimport io.vertx.core.eventbus.Message;\nimport org.btr.ygo.core.kit.Trunk;\n\nimport java.lang.reflect.Method;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic interface IReplier &#123;\n  // 定义一个map,用于表驱动选取对应的应答模式,默认是Future.\n  Map&lt;Class&lt;?&gt;, IReplier&gt; MAP = new HashMap&lt;&gt;() &lt;!--swig￼0--&gt;;\n  static IReplier get(Class&lt;?&gt; key) &#123;\n    return MAP.getOrDefault(key, Trunk.singleton(FutureReplier.class));\n  &#125;\n  void reply(Object proxy, Method method, Message&lt;Object&gt; message);\n&#125;FutureReplier.java\njavapackage org.btr.ygo.core.actor;\n\nimport io.vertx.core.Future;\nimport io.vertx.core.eventbus.Message;\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.constant.Console;\nimport org.btr.ygo.core.kit.Reflect;\nimport org.btr.ygo.core.kit.Verticles;\n\nimport java.lang.reflect.Method;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class FutureReplier implements IReplier &#123;\n  @Override\n  public void reply(Object proxy, Method method, Message&lt;Object&gt; message) &#123;\n    // 因为是Future响应,返回值的形式是Future&lt;?&gt;,光靠method.getReturnType()是拿不到具体泛型的.\n    val retType = method.getGenericReturnType();\n    log.info(Console.REPLY, getClass(), retType, false);\n    // 反射执行方法\n    Reflect.&lt;Future&lt;?&gt;&gt;invokeMethod(proxy, method.getName(), message)\n      // 执行完成,开始应答.\n      .onComplete(ar -&gt; message.reply(ar.result(), Verticles.delivery()));\n  &#125;\n&#125;\nEventloop集成本体EventloopExtractor.java\njavapackage org.btr.ygo.core.actor;\n\nimport io.vertx.core.DeploymentOptions;\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.annotations.Eventloop;\nimport org.btr.ygo.core.constant.Console;\nimport org.btr.ygo.core.constant.Const;\nimport org.btr.ygo.core.kit.Fn;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Eventloop类的Verticle参数提取\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class EventloopExtractor implements IExtractor &#123;\n  private static final Map&lt;Class&lt;?&gt;, DeploymentOptions&gt; OPTIONS = new HashMap&lt;&gt;();\n  @Override\n  public DeploymentOptions extract(Class&lt;?&gt; cls) &#123;\n    log.info(Console.DEPLOY, Const.EVENTLOOP, cls.getName());\n    return Fn.pool(OPTIONS, cls, () -&gt; extractValue(cls));\n  &#125;\n  private DeploymentOptions extractValue(Class&lt;?&gt; cls) &#123;\n    val anno = cls.getAnnotation(Eventloop.class);\n    val options =\n      new DeploymentOptions().setHa(anno.ha()).setInstances(anno.instances()).setWorker(false);\n    if (!OPTIONS.isEmpty()) &#123;\n      val latest = OPTIONS.getOrDefault(cls, new DeploymentOptions());\n      val oldest = options.toJson();\n      oldest.mergeIn(latest.toJson(), true);\n      return new DeploymentOptions(oldest);\n    &#125;\n    log.info(Console.DEPLOYED, Const.EVENTLOOP, options.getInstances(), options.isHa(),\n      options.toJson());\n    return options;\n  &#125;\n&#125;EventloopActor.java\njavapackage org.btr.ygo.core.actor;\n\nimport io.vertx.core.Vertx;\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.constant.Const;\nimport org.btr.ygo.core.constant.EventloopType;\nimport org.btr.ygo.core.kit.Trunk;\nimport org.btr.ygo.core.kit.Verticles;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * eventloop集合与Vert.x集成\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class EventloopActor implements IActor &#123;\n  // 这里定义一个集合,因为eventloop目前总共有三类, http、tcp、sock.\n  public static final Map&lt;EventloopType, Class&lt;?&gt;&gt; EVENTLOOPS = new HashMap&lt;&gt;();\n  @Override\n  public void integration(Vertx vertx) &#123;\n    // 配置提取器\n    val extractor = Trunk.&lt;EventloopExtractor&gt;singleton(EventloopExtractor.class);\n    // 循环作为Verticle部署到Vert.x中\n    EVENTLOOPS.forEach((type, cls) -&gt; Verticles.deploy(vertx, extractor.extract(cls), cls));\n    // 钩子,优雅从Vert.x中卸载对应的Verticle.\n    Runtime.getRuntime().addShutdownHook(new Thread(\n      () -&gt; EVENTLOOPS.forEach((type, cls) -&gt; Verticles.undeploy(vertx, cls, Const.EVENTLOOP))));\n  &#125;\n&#125;Eventloop类型分为http、tcp、sock分类,这里我们实现一个http.\nhttp实现http我们只实现任务调度部分.\nhttp非vertx-core内容,这里我们新建一个web模块,接下来web方面内容都在该模块下写.\nbuild.gradle(web模块下)\ntxtdependencies &#123;\n  // 依赖核心组件\n  compile project(&quot;:core&quot;)\n  // 追加vertx-web\n  compile &quot;io.vertx:vertx-web:$vertxVersion&quot;\n&#125;http配置新建两个Java文件,一个是配置对象,一个是继承自前两章的IConfig接口来实现配置读取.\n配置对象Server.java\njavapackage org.btr.ygo.web.config;\n\nimport io.vertx.core.json.JsonObject;\nimport lombok.AccessLevel;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\nimport lombok.experimental.FieldDefaults;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Data\n@Accessors(chain = true)\n@FieldDefaults(level = AccessLevel.PRIVATE)\npublic class Server &#123;\n  // HttpServerOptions NetServerOptions\n  JsonObject options;\n  String type;\n  String name;\n&#125;配置读取ServerConfig.java\njavapackage org.btr.ygo.web.config;\n\nimport io.vertx.core.json.JsonArray;\nimport io.vertx.core.json.JsonObject;\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.config.IConfig;\nimport org.btr.ygo.core.config.YgoConfig;\nimport org.btr.ygo.core.constant.Const;\nimport org.btr.ygo.core.kit.Trunk;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * 从配置文件中读取Web服务配置\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class ServerConfig implements IConfig&lt;Map&lt;Integer, Server&gt;&gt; &#123;\n  @Override\n  public Map&lt;Integer, Server&gt; read() &#123;\n    val config = Trunk.&lt;YgoConfig&gt;singleton(YgoConfig.class).read();\n    return read(config.getJsonObject(Const.VERTX).getJsonArray(Const.SERVER));\n  &#125;\n  // 根据端口分组\n  private Map&lt;Integer, Server&gt; read(JsonArray xs) &#123;\n    val map = new HashMap&lt;Integer, Server&gt;();\n    xs.forEach(d -&gt; &#123;\n      val json = JsonObject.mapFrom(d);\n      val options = json.getJsonObject(Const.OPTIONS);\n      val port = options.getInteger(Const.PORT, 8080);\n      val value = new Server().setName(json.getString(&quot;name&quot;)).setType(json.getString(&quot;type&quot;))\n        .setOptions(options);\n      map.put(port, value);\n    &#125;);\n    return map;\n  &#125;\n&#125;配置示例application.yaml\nyaml#### 配置示例\nygo:\n  profile: default\n  vertx:\n    name: vertx-ygo\n    options:\n      haEnabled: false\n      preferNativeTransport: true\n    server:\n      - name: default-port\n        type: http\n        options:\n          host: 0.0.0.0\n          port: 8080http本体EventloopHttpActor.java\njavapackage org.btr.ygo.web.actor;\n\nimport io.vertx.core.AbstractVerticle;\nimport io.vertx.core.http.HttpServerOptions;\nimport io.vertx.ext.web.Router;\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.annotations.Eventloop;\nimport org.btr.ygo.core.constant.Const;\nimport org.btr.ygo.web.config.Server;\nimport org.btr.ygo.web.constant.Console;\nimport org.btr.ygo.web.kit.Deck;\nimport org.btr.ygo.web.kit.Network;\n\n/**\n * eventloop的http实现\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\n@Eventloop\npublic final class EventloopHttpActor extends AbstractVerticle &#123;\n  @Override\n  public void start() throws Exception &#123;\n    // http服务集合\n    Deck.HTTP_SERVERS.forEach((port, config) -&gt; &#123;\n      // 获取路由\n      val router = Router.router(vertx);\n      server(router, port, config);\n    &#125;);\n  &#125;\n  // 发布http服务\n  private void server(Router router, Integer port, Server config) &#123;\n    val options = new HttpServerOptions(config.getOptions());\n    vertx.createHttpServer(options).requestHandler(router).listen();\n    // 发布api地址\n    val path = &quot;http://&quot; + Network.getIPv4() + Const.COLON + port + Const.SLASH;\n    log.info(Console.SERVER, getClass().getSimpleName(), Const.HTTP, path);\n  &#125;\n&#125;\nWorker集成本体这一块同Eventloop部分,不多赘述.\nWorkerExtractor.java\njavapackage org.btr.ygo.core.actor;\n\nimport io.vertx.core.DeploymentOptions;\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.annotations.Worker;\nimport org.btr.ygo.core.constant.Console;\nimport org.btr.ygo.core.constant.Const;\nimport org.btr.ygo.core.kit.Fn;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class WorkerExtractor implements IExtractor &#123;\n  private static final Map&lt;Class&lt;?&gt;, DeploymentOptions&gt; OPTIONS = new HashMap&lt;&gt;();\n  @Override\n  public DeploymentOptions extract(Class&lt;?&gt; cls) &#123;\n    log.info(Console.DEPLOY, Const.WORKER, cls.getName());\n    return Fn.pool(OPTIONS, cls, () -&gt; extractValue(cls));\n  &#125;\n  private DeploymentOptions extractValue(Class&lt;?&gt; cls) &#123;\n    val anno = cls.getAnnotation(Worker.class);\n    val options =\n      new DeploymentOptions().setHa(anno.ha()).setInstances(anno.instances()).setWorker(true);\n    if (!OPTIONS.isEmpty()) &#123;\n      val latest = OPTIONS.getOrDefault(cls, new DeploymentOptions());\n      val oldest = options.toJson();\n      oldest.mergeIn(latest.toJson(), true);\n      return new DeploymentOptions(oldest);\n    &#125;\n    log.info(Console.DEPLOYED, Const.WORKER, options.getInstances(), options.isHa(), options.toJson());\n    return options;\n  &#125;\n&#125;WorkerActor.java\njavapackage org.btr.ygo.core.actor;\n\nimport io.vertx.core.Vertx;\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.constant.Const;\nimport org.btr.ygo.core.kit.Trunk;\nimport org.btr.ygo.core.kit.Verticles;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class WorkerActor implements IActor&#123;\n  @Override\n  public void integration(Vertx vertx) &#123;\n    val extractor = Trunk.&lt;WorkerExtractor&gt;singleton(WorkerExtractor.class);\n    Trunk.WORKERS.forEach(cls -&gt; Verticles.deploy(vertx, extractor.extract(cls), cls));\n    Runtime.getRuntime().addShutdownHook(\n      new Thread(() -&gt; Trunk.WORKERS.forEach(cls -&gt; Verticles.undeploy(vertx, cls, Const.WORKER))));\n  &#125;\n&#125;http实现http的请求调度eventloop已经实现,这里我们只需要实现http的请求处理.\nhttp本体WorkerHttpActor.java\njavapackage org.btr.ygo.web.actor;\n\nimport io.vertx.core.AbstractVerticle;\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.actor.IReplier;\nimport org.btr.ygo.core.annotations.Worker;\nimport org.btr.ygo.core.kit.Trunk;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\n@Worker\npublic final class WorkerHttpActor extends AbstractVerticle &#123;\n  @Override\n  public void start() throws Exception &#123;\n    // 所有的Vert.x消息\n    Trunk.RECEIPTS.forEach(data -&gt; &#123;\n      val method = data.getMethod();\n      // 根据返回值类型,Future Object决定应答模式.\n      val replier = IReplier.get(method.getReturnType());\n      // Vert.x EventBus上根据地址开始消费消息并响应.\n      vertx.eventBus().consumer(data.getAddr(), msg -&gt; replier.reply(data.getProxy(), method, msg));\n    &#125;);\n  &#125;\n&#125;\n总结这一章我们大体上实现了Eventloop、Worker类、配置与Vert.x的集成,让这些玩意转成Vert.x能看懂的Verticle.\n","slug":"从零开始撸框架(5)-与Vert.x集成 基础篇(一)","date":"2021-05-07T00:27:12.000Z","categories_index":"从零开始","tags_index":"Vert.x,Actor,设计模式,Java,代理模式","author_index":"因雨而生"},{"id":"45dcae5ccfe9e8f63cc7cbe584bb9d7a","title":"从零开始撸框架(4)-配置读取器","content":"到目前为止,框架已经支持了 工厂 、 Bean分组 、 依赖注入 ,这一章我们来实现框架配置的读取.\n配置读取基类老样子,我们还是先定义一个读取基类,方便后续子类扩展.\nIConfig.java\njavapackage org.btr.ygo.core.config;\n\n/**\n * 读取配置文件\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic interface IConfig&lt;T&gt; &#123;\n  T read();\n&#125;辅助类配置加载肯定会涉及到IO流IO.java\njavapackage org.btr.ygo.core.kit;\n\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.net.JarURLConnection;\nimport java.net.URL;\nimport java.util.Objects;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class IO &#123;\n  // 确保能获取输入流\n  public static InputStream ensureRead(String filename) &#123;\n    return Fn.ensureRun(() -&gt; &#123;\n      val file = new File(filename);\n      var in = Fn.ensureRun(file.exists() &amp;&amp; file.isFile(),\n        // 1. 直接读文件\n        () -&gt; new FileInputStream(file),\n        // 2. 环境上下文\n        () -&gt; Thread.currentThread().getContextClassLoader().getResourceAsStream(filename));\n      // 3. 当前类加载器\n      if (Objects.isNull(in)) in = IO.class.getResourceAsStream(filename);\n      // 4. 类加载器\n      if (Objects.isNull(in)) in = ClassLoader.getSystemResourceAsStream(filename);\n      // 5. jar加载\n      if (Objects.isNull(in) &amp;&amp; filename.contains(&quot;jar!/&quot;)) &#123;\n        val url = new URL(filename);\n        val protocol = url.getProtocol();\n        if (&quot;jar&quot;.equals(protocol)) &#123;\n          val jar = (JarURLConnection) url.openConnection();\n          in = jar.getInputStream();\n        &#125;\n      &#125;\n      if (Objects.isNull(in)) throw new IllegalStateException(filename);\n      return in;\n    &#125;, filename);\n  &#125;\n&#125;加载基类,子类继承后实现多种不同的加载方式,比如: yaml 、 xml 、properties 、 json .ILoader.java\njavapackage org.btr.ygo.core.config;\n\nimport org.btr.ygo.core.kit.Trunk;\n\nimport java.util.Map;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic interface ILoader &#123;\n  // 这里根据后缀名调用对应的loader.\n  Map&lt;String, ILoader&gt; MAP = Map.of(&quot;.yaml&quot;, Trunk.singleton(YamlLoader.class));\n  String load(String filename);\n&#125;这里我只实现yaml读取,其他省略.\ncore模块build.gradle追加\ntxtdependencies &#123;\n  // 读yaml\n  compile &quot;com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion&quot;\n&#125;YamlLoader.java\njavapackage org.btr.ygo.core.config;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\nimport org.btr.ygo.core.kit.Fn;\nimport org.btr.ygo.core.kit.IO;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic final class YamlLoader implements ILoader &#123;\n  private static final ObjectMapper YAML = new YAMLMapper();\n  @Override\n  public String load(String filename) &#123;\n    return Fn.ensureRun(() -&gt; YAML.readTree(IO.ensureRead(filename)).toString(), filename);\n  &#125;\n&#125;Configs.java\njavapackage org.btr.ygo.core.kit;\n\nimport io.netty.util.internal.StringUtil;\nimport io.vertx.core.json.JsonObject;\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.config.ILoader;\nimport org.btr.ygo.core.constant.Console;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class Configs &#123;\n  private static final Map&lt;String, JsonObject&gt; CONFIG = new HashMap&lt;&gt;();\n  // 框架配置文件名,我这里写死了yaml\n  private static final String CONFIG_FILE = &quot;application.yaml&quot;;\n  // 框架默认配置\n  private static final String DEFAULT = &quot;ygo/&quot;;\n  // 默认采用的loader,这里我写死了yaml,可自行扩展成动态.\n  private static final ILoader LOADER = ILoader.MAP.get(&quot;.yaml&quot;);\n  // 生成读取文件名\n  // 1. application.yaml\n  // 2. application-key.yaml\n  public static String generateFilename(String key) &#123;\n    return Fn.ensureRun(Objects.isNull(key),\n      () -&gt; CONFIG_FILE,\n      () -&gt; &quot;application-&quot; + key + &quot;.yaml&quot;);\n  &#125;\n  public static JsonObject read(String filename) &#123;\n    val name = generateFilename(filename);\n    val value = CONFIG.get(name);\n    // 缓存有则不再走io流读取\n    if (Objects.nonNull(value)) return value;\n    val merged = new JsonObject();\n    // 1.默认配置\n    val defaultPath = DEFAULT + name;\n    val silent = loader(defaultPath);\n    log.info(Console.CONFIG_READ, &quot;Default&quot;, defaultPath);\n    merged.mergeIn(silent, true);\n    // 2.用户自定义配置\n    log.info(Console.CONFIG_READ, &quot;User&quot;, name);\n    val custom = loader(name);\n    // 两者配置都存在的场合需要合并\n    if (!custom.isEmpty()) &#123;\n      log.info(Console.MERGE);\n      merged.mergeIn(custom, true);\n    &#125;\n    CONFIG.put(name, merged);\n    return merged;\n  &#125;\n  // 所有loader加载完后统一转换成Vert.x的JsonObject格式数据.\n  private static JsonObject loader(String filename) &#123;\n    val text = LOADER.load(filename);\n    return Fn\n      .ensureRun(StringUtil.isNullOrEmpty(text), JsonObject::new, () -&gt; new JsonObject(text));\n  &#125;\n&#125;\n框架配置读取器本体整个框架的配置YgoConfig.java\njavapackage org.btr.ygo.core.config;\n\nimport io.vertx.core.json.JsonObject;\nimport lombok.val;\nimport org.btr.ygo.core.constant.Const;\nimport org.btr.ygo.core.kit.Configs;\n\n/**\n * 框架整体配置\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic final class YgoConfig implements IConfig&lt;JsonObject&gt; &#123;\n  @Override\n  public JsonObject read() &#123;\n    // 读取application.yaml\n    val json = Configs.read(null);\n    return json.getJsonObject(Const.YGO);\n  &#125;\n&#125;测试在 &#x2F;test&#x2F;main&#x2F;resources 、 &#x2F;test&#x2F;main&#x2F;resources&#x2F;ygo&#x2F; 目录下分别添加 application.yaml 文件.application.yaml\nyamlygo:\n  name: test\n  profile: default配置读取测试类IConfigTest.java\njavapackage org.btr.ygo.core.config;\n\nimport lombok.val;\nimport org.btr.ygo.core.kit.Trunk;\nimport org.junit.Assert;\nimport org.junit.Test;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic class IConfigTest &#123;\n  @Test\n  public void testYgo() &#123;\n    val config = Trunk.&lt;YgoConfig&gt;singleton(YgoConfig.class);\n    val json = config.read();\n    val data = json.getString(&quot;name&quot;);\n    Assert.assertEquals(data, &quot;test&quot;);\n  &#125;\n&#125;测试结果Vert.x配置读取器本体VertxConfig.java\njavapackage org.btr.ygo.core.config;\n\nimport io.vertx.core.VertxOptions;\nimport lombok.val;\nimport org.btr.ygo.core.constant.Const;\nimport org.btr.ygo.core.kit.Trunk;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic class VertxConfig implements IConfig&lt;VertxOptions&gt; &#123;\n  @Override\n  public VertxOptions read() &#123;\n    // 先读取框架配置\n    val ygo = Trunk.&lt;YgoConfig&gt;singleton(YgoConfig.class);\n    val config = ygo.read();\n    // 从框架配置中读取Vertx部分\n    val options =  new VertxOptions(config.getJsonObject(Const.VERTX).getJsonObject(Const.OPTIONS));\n    // 这里是我个人习惯,将线程数设置为CPU核心*2\n    // 可以参考这个 https://www.cnblogs.com/dennyzhangdd/p/6909771.html\n    // 工作线程默认为20,如果没变动则将其改为CPU核数*2;\n    if (20 == options.getWorkerPoolSize()) options.setWorkerPoolSize(VertxOptions.DEFAULT_EVENT_LOOP_POOL_SIZE);\n    return options;\n  &#125;\n&#125;测试test 文件夹下的 application.yaml 追加内容\nyamlygo:\n  name: test\n  profile: default\n  vertx:\n    name: vertx-ygo\n    options:\n      haEnabled: false\n      preferNativeTransport: trueIConfigTest.java追加测试\njavapublic class IConfigTest &#123;\n  ...\n  @Test\n  public void testVertx() &#123;\n    val config = Trunk.&lt;VertxConfig&gt;singleton(VertxConfig.class);\n    val options = config.read();\n    Assert.assertTrue(options.getPreferNativeTransport());\n  &#125;\n&#125;测试结果\n\n总结这一章我们实现了框架配置的yaml读取,并且也留下了修改的入口,日后扩展其他方式也无须修改源代码,子类自行实现 ILoader.java 即可.\n框架的其他参数读取同理,扩展 IConfig.java 即可.\n","slug":"从零开始撸框架(4)-配置读取器","date":"2021-05-01T22:43:37.000Z","categories_index":"从零开始","tags_index":"Vert.x,Actor,设计模式,Java","author_index":"因雨而生"},{"id":"bf9123d57d7a0fda9f11ed154298fba1","title":"从零开始撸框架(3)-类扫描器","content":"上一章我们已经把每个包中的类都统一加载到一个Set中了,以后凡是需要用到类的场景我们都可以从Set集合中取出,但是光这样还不够好.往后所有操作都依赖于这一个集合,这也意味着我们对集合元素有改动都会影响到所有组件使用.所以这一章我们来进一步细化,根据不同的需求把这个大Set集合拆分成小的集合.\n扫描基类这里我们定义一个扫描接口,接收类集合得出我们想要的结果,方便子类根据不同需求进行扩展.\nIScanner.java\njavapackage org.btr.ygo.core.scan;\n\nimport java.util.Set;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic interface IScanner&lt;T&gt; &#123;\n  T scan(Set&lt;Class&lt;?&gt;&gt; classes);\n&#125;下面根据需求实现不同的子类,这里采用的是Reactor架构模型.\n\n事件循环线程(Eventloop)扫描器首先我们把所有事件循环的类从Set集合中独立出来,这块是框架调度分发的核心,完全有独立出来的意义.\n辅助类这里定义几种类型,分别对应http、tcp、sock服务.EventloopType.java\njavapackage org.btr.ygo.constant;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic enum EventloopType &#123;\n  HTTP, TCP, SOCK;\n  private static final List&lt;String&gt; HTTP_TYPE =\n    Arrays.asList(HTTP.name().toLowerCase(), SOCK.name().toLowerCase());\n  public static boolean isHttp(String type) &#123;\n    return HTTP_TYPE.contains(type);\n  &#125;\n  public static boolean isNet(String type) &#123;\n    return TCP.name().equalsIgnoreCase(type);\n  &#125;\n&#125;注解式开发,用注解把类标识出来.Eventloop.java\njavapackage org.btr.ygo.annotations;\n\nimport org.btr.ygo.constant.EventloopType;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Inherited\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(&#123;ElementType.TYPE,ElementType.ANNOTATION_TYPE&#125;)\npublic @interface Eventloop &#123;\n  boolean ha() default false;\n  int instances() default 1;\n  EventloopType type() default EventloopType.HTTP;\n&#125;本体具体的事件循环扫描实现,通过扫描包含@Eventloop注解的类.\nEventloopScanner.java\njavapackage org.btr.ygo.core.scan;\n\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.annotations.Eventloop;\nimport org.btr.ygo.core.constant.Console;\n\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class EventloopScanner implements IScanner&lt;Set&lt;Class&lt;?&gt;&gt;&gt; &#123;\n  @Override\n  public Set&lt;Class&lt;?&gt;&gt; scan(Set&lt;Class&lt;?&gt;&gt; classes) &#123;\n    val ret =\n      classes.stream().filter(d -&gt; d.isAnnotationPresent(Eventloop.class)).collect(Collectors.toSet());\n    log.info(Console.SCANNED, &quot;Eventloop&quot;, ret.size());\n    return ret;\n  &#125;\n&#125;测试IScannerTest.java\njavapackage org.btr.ygo.core.scan;\n\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.annotations.Eventloop;\nimport org.btr.ygo.core.kit.Packages;\nimport org.btr.ygo.core.kit.Trunk;\nimport org.hamcrest.CoreMatchers;\nimport org.junit.Assert;\nimport org.junit.Test;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic class IScannerTest &#123;\n  @Eventloop\n  public static class TestEventloop &#123;\n  &#125;\n  @Test\n  public void testEventloop() &#123;\n    val classes = Packages.scan();\n    val scanner = Trunk.&lt;EventloopScanner&gt;singleton(EventloopScanner.class);\n    val ret = scanner.scan(classes);\n    Assert.assertThat(ret, CoreMatchers.hasItem(TestEventloop.class));\n  &#125;\n&#125;测试结果工作线程(Worker)扫描器工作类负责框架各种任务的执行,具体实现同Eventloop.\n辅助类Worker.java\njavapackage org.btr.ygo.core.annotations;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Inherited\n@Documented\n@Target(&#123;ElementType.TYPE,ElementType.ANNOTATION_TYPE&#125;)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Worker &#123;\n  boolean ha() default false;\n  int instances() default 1;\n&#125;本体WorkerScanner.java\njavapackage org.btr.ygo.core.scan;\n\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.annotations.Worker;\nimport org.btr.ygo.core.constant.Console;\n\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class WorkerScanner implements IScanner&lt;Set&lt;Class&lt;?&gt;&gt;&gt; &#123;\n  @Override\n  public Set&lt;Class&lt;?&gt;&gt; scan(Set&lt;Class&lt;?&gt;&gt; classes) &#123;\n    val ret =\n      classes.stream().filter(d -&gt; d.isAnnotationPresent(Worker.class)).collect(Collectors.toSet());\n    log.info(Console.SCANNED, &quot;Worker&quot;, ret.size());\n    return ret;\n  &#125;\n&#125;测试在IScannerTest.java中追加一例测试.java public class IScannerTest &#123;   ...   @Worker   public static class TestWorker &#123;   &#125;   @Test   public void testWorker() &#123;     val classes = Packages.scan();     val scanner = Trunk.&lt;WorkerScanner&gt;singleton(WorkerScanner.class);     val ret = scanner.scan(classes);     Assert.assertThat(ret, CoreMatchers.hasItem(TestWorker.class));   &#125; &#125; 测试结果Vert.x消息扫描器在Vert.x官网示例中,我们可以看到它Eventloop与Worker交互是通过vertx.eventBus()来实现的.因此我们把交互消息也定义成一个类,把它也从类集合中独立出来.\n辅助类Receipt.java\njavapackage org.btr.ygo.core.scan;\n\nimport lombok.AccessLevel;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\nimport lombok.experimental.FieldDefaults;\n\nimport java.lang.reflect.Method;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Data\n@Accessors(chain = true)\n@FieldDefaults(level = AccessLevel.PRIVATE)\npublic class Receipt &#123;\n  // 承载消息的类.\n  Object proxy;\n  // 发布在Vert.x上的消息地址.\n  String addr;\n  // 具体执行的方法.\n  Method method;\n&#125;分别定义EventBus和Addr两个注解,用来标识类是否要处于Vert.x的消息队列中和类在队列上的地址.EventBus.java\njavapackage org.btr.ygo.core.annotations;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Inherited\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(&#123;ElementType.TYPE,ElementType.ANNOTATION_TYPE&#125;)\npublic @interface EventBus &#123;\n&#125;Addr.java\njavapackage org.btr.ygo.core.annotations;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Inherited\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(&#123;ElementType.METHOD,ElementType.ANNOTATION_TYPE&#125;)\npublic @interface Addr &#123;\n  String value();\n&#125;我们在之前的Trunk.java工厂类中添加新的方法,分别实现获取实现类和代理类的功能.Trunk.java\njavapublic final class Trunk &#123;\n  ...\n  public static Class&lt;?&gt; getImpl(Class&lt;?&gt; cls) &#123;\n    return Fn.ensureRun(() -&gt; &#123;\n      // 搜索全部包下的类得到所有cls实现的类,必须是单实现.\n      val classes = Packages.scan().stream()\n        // 过滤掉自身以及子类\n        .filter(d -&gt; cls.isAssignableFrom(d) &amp;&amp; d != cls)\n        .collect(Collectors.toList());\n      return 1 == classes.size() ? classes.get(0) : null;\n    &#125;, cls);\n  &#125;\n  public static Object getProxy(Class&lt;?&gt; cls) &#123;\n    return Fn.ensureRun(!cls.isInterface(),\n      // 非接口直接单例对象\n      () -&gt; Trunk.singleton(cls),\n      () -&gt; &#123;\n        // 接口获取其实现类\n        val implCls = Trunk.getImpl(cls);\n        // 实现类不为空获取其单例对象\n        return Fn.ensureRun(() -&gt; Trunk.singleton(implCls), implCls);\n      &#125;);\n  &#125;\n&#125;本体ReceiptScanner.java\njavapackage org.btr.ygo.core.scan;\n\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.annotations.Addr;\nimport org.btr.ygo.core.annotations.EventBus;\nimport org.btr.ygo.core.constant.Console;\nimport org.btr.ygo.core.kit.Methods;\nimport org.btr.ygo.core.kit.Trunk;\n\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class ReceiptScanner implements IScanner&lt;Set&lt;Receipt&gt;&gt; &#123;\n  @Override\n  public Set&lt;Receipt&gt; scan(Set&lt;Class&lt;?&gt;&gt; classes) &#123;\n    // 所有@EventBus注解的类\n    val eventBuses = classes.stream().filter(d -&gt; d.isAnnotationPresent(EventBus.class))\n      .collect(Collectors.toSet());\n    log.info(Console.SCANNED, &quot;EventBus&quot;, eventBuses.size());\n    val receipts = eventBuses.stream()\n      // 根据类下所有的方法,将其转成为Receipt对象.\n      .flatMap(d -&gt; Arrays.stream(d.getDeclaredMethods()).filter(Methods::validateMethod))\n      .map(this::scan).collect(Collectors.toSet());\n    log.info(Console.SCANNED, &quot;Address&quot;, receipts.size());\n    return receipts;\n  &#125;\n  private Receipt scan(Method method) &#123;\n    val cls = method.getDeclaringClass();\n    val proxy = Trunk.getProxy(cls);\n    val addr = method.getAnnotation(Addr.class).value();\n    val data = new Receipt().setAddr(addr).setMethod(method)\n      .setProxy(proxy);\n    log.info(&quot;Address: &#123;&#125;&quot;, addr);\n    return data;\n  &#125;\n&#125;测试继续在IScannerTest.java追加测试\njavapublic class IScannerTest &#123;\n  ...\n  @EventBus\n  public static class TestEventBus &#123;\n    @Addr(&quot;test&quot;)\n    public void test() &#123;\n    &#125;\n  &#125;\n  @Test\n  public void testReceipt() &#123;\n    val classes = Packages.scan();\n    val scanner = Trunk.&lt;ReceiptScanner&gt;singleton(ReceiptScanner.class);\n    val data = new Receipt().setAddr(&quot;test&quot;);\n    val xs = scanner.scan(classes);\n    val ret = xs.stream().filter(d -&gt; data.getAddr().equals(d.getAddr())).findAny();\n    Assert.assertTrue(ret.isPresent());\n  &#125;\n&#125;测试结果\n\n依赖注入(Dependency Injection)扫描器用过spring的都知道 @Resource 、 @Autowire 注入,其中前者是jsr250的,后者是spring封装的.\n这里我们也可以封装一套类似于Spring的,也可以基于现有的注解开发,在这我选择基于jsr330注解开发.\n在core模块build.gradle中追加\ntxtdependencies &#123;\n  ...\n  // jsr330\n  compile &quot;javax.inject:javax.inject:1&quot;\n  ...\n&#125;辅助类在Trunk.java追加一个新的方法\njavapublic final class Trunk &#123;\n  ...\n  // 递归查询是否有实现类\n  public static boolean hasMatchImpl(Class&lt;?&gt; cls, Class&lt;?&gt; interfaceCls) &#123;\n    var b = Arrays.asList(cls.getInterfaces()).contains(interfaceCls);\n    if (!b &amp;&amp; Objects.nonNull(cls.getSuperclass()))\n      b = hasMatchImpl(cls.getSuperclass(), interfaceCls);\n    return b;\n  &#125;\n&#125;这里和Package扫描一样,类比较多,我们一个类创建一个线程来加快注入的扫描.DiThread.java\njavapackage org.btr.ygo.core.scan;\n\nimport io.netty.util.internal.StringUtil;\nimport lombok.AccessLevel;\nimport lombok.experimental.FieldDefaults;\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.constant.Console;\nimport org.btr.ygo.core.kit.Trunk;\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.Supplier;\nimport java.util.stream.Collectors;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\n@FieldDefaults(level = AccessLevel.PUBLIC, makeFinal = true)\npublic final class DiThread extends Thread &#123;\n  // 当前类\n  Class&lt;?&gt; cls;\n  // 所有类,需要在这里面找到当前类所有字段类型实现来注入.\n  Set&lt;Class&lt;?&gt;&gt; classes;\n  // 当前类所有字段的对应类型\n  Map&lt;String, Class&lt;?&gt;&gt; FIELD_INJECTS = new HashMap&lt;&gt;();\n  public DiThread(Class&lt;?&gt; cls, Set&lt;Class&lt;?&gt;&gt; classes) &#123;\n    setName(&quot;ygo-di-scanner-&quot; + getId());\n    this.cls = cls;\n    this.classes = classes;\n  &#125;\n  @Override\n  public void run() &#123;\n    // 类转换成类字段数组\n    val fields = Arrays.stream(cls.getDeclaredFields())\n      // 过滤掉没有@Inject注解的字段\n      .filter(field -&gt; field.isAnnotationPresent(Inject.class))\n      // 转成 key -&gt; 类字段名 value -&gt; 字段类型的map格式 \n      .collect((Supplier&lt;HashMap&lt;String, Class&lt;?&gt;&gt;&gt;) HashMap::new,\n        (map, field) -&gt; map.put(field.getName(), standard(field)), HashMap::putAll);\n    FIELD_INJECTS.putAll(fields);\n  &#125;\n  // 标准注入\n  private Class&lt;?&gt; standard(Field field) &#123;\n    val type = field.getType();\n    if (!type.isInterface()) return type;\n    val name = field.getName();\n    // 字段的实现列表\n    val impls =\n      classes.stream().filter(cls -&gt; Trunk.hasMatchImpl(cls, type)).collect(Collectors.toList());\n    // 空实现\n    if (impls.isEmpty()) &#123;\n      val typeName = field.getDeclaringClass().getName();\n      log.error(Console.JSR330, typeName, name, type.getName());\n      throw new IllegalArgumentException();\n    &#125;\n    else &#123;\n      val size = impls.size();\n      // 多实现\n      if (1 != size) return qualifier(field, impls);\n        // 只有一个实现\n      else &#123;\n        val implCls = impls.get(0);\n        log.info(Console.DI, cls, name, implCls.getName(), Inject.class);\n        return implCls;\n      &#125;\n    &#125;\n  &#125;\n  // 多实现,通过value指定实例.\n  private Class&lt;?&gt; qualifier(Field field, List&lt;Class&lt;?&gt;&gt; implClasses) &#123;\n    val names = implClasses.stream().map(Class::getName).collect(Collectors.toList());\n    log.info(Console.SCANNED, &quot;Instance&quot;, String.join(&quot;,&quot;, names));\n    val qualifier = field.getAnnotation(Named.class).value();\n    val cls = implClasses.stream()\n      .filter(item -&gt; &#123;\n        val named = item.getAnnotation(Named.class).value();\n        return qualifier.equals(named) &amp;&amp; !StringUtil.isNullOrEmpty(named);\n      &#125;).findAny();\n    return cls.get();\n  &#125;\n&#125;本体DiScanner.java\njavapackage org.btr.ygo.core.scan;\n\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.constant.Console;\n\nimport javax.inject.Inject;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class DiScanner implements IScanner&lt;Map&lt;Class&lt;?&gt;, Map&lt;String, Class&lt;?&gt;&gt;&gt;&gt; &#123;\n  @Override\n  public Map&lt;Class&lt;?&gt;, Map&lt;String, Class&lt;?&gt;&gt;&gt; scan(Set&lt;Class&lt;?&gt;&gt; classes) &#123;\n    // 所有包含@Inject注解字段的类\n    val xs = classes.stream().filter(cls -&gt; Arrays.stream(cls.getDeclaredFields())\n      .anyMatch(field -&gt; field.isAnnotationPresent(Inject.class)))\n      .collect(Collectors.toSet());\n    // 一个类一个线程\n    val threads = xs.stream().map(cls -&gt; new DiThread(cls, classes))\n      .collect(Collectors.toSet());\n    // 线程启动\n    threads.forEach(Thread::start);\n    // 最终返回数据结构 key -&gt; 类类型, value -&gt; (key -&gt; 字段名, value -&gt; 字段类型).\n    val ret = new HashMap&lt;Class&lt;?&gt;, Map&lt;String, Class&lt;?&gt;&gt;&gt;();\n    try &#123;\n      // 主线程等待子线程全部扫描完毕\n      for (DiThread thread : threads) thread.join();\n      for (DiThread thread : threads) &#123;\n        val key = thread.cls;\n        val value = thread.FIELD_INJECTS;\n        ret.put(key, value);\n        log.info(Console.INJECT, key.getName(), value.size());\n      &#125;\n    &#125; catch (Exception ex) &#123;\n      ex.printStackTrace();\n    &#125;\n    return ret;\n  &#125;\n&#125;测试IScannerTest.java追加\njavapublic class IScannerTest &#123;\n  ...\n  public interface TestQualifier &#123;&#125;\n  @Named(&quot;testQualifierA&quot;)\n  public static class TestQualifierA implements TestQualifier &#123;&#125;\n  @Named(&quot;testQualifierB&quot;)\n  public static class TestQualifierB implements TestQualifier &#123;&#125;\n  public static class TestDi &#123;\n    @Inject\n    private TestEventBus testEventBus;\n    @Inject\n    @Named(&quot;testQualifierB&quot;)\n    private TestQualifier testQualifier;\n  &#125;\n  @Test\n  public void testDi() &#123;\n    val classes = Packages.scan();\n    val scanner = Trunk.&lt;DiScanner&gt;singleton(DiScanner.class);\n    val ret = scanner.scan(classes);\n    val data = ret.get(TestDi.class);\n    val type1 = data.get(&quot;testEventBus&quot;);\n    Assert.assertEquals(type1, TestEventBus.class);\n    val type2 = data.get(&quot;testQualifier&quot;);\n    Assert.assertNotEquals(type2, TestQualifierA.class);\n    Assert.assertEquals(type2, TestQualifierB.class);\n  &#125;\n&#125;测试结果\n\n总结这一章我们基于一个扫描基类实现了各个核心组件的解耦扫描,以后有新的组件只需要自行扩展实现IScanner.java即可.\n在往后几章我们肯定还会基于这个基类继续扩展功能实现.\n","slug":"从零开始撸框架(3)-类扫描器","date":"2021-05-01T16:01:49.000Z","categories_index":"从零开始","tags_index":"Vert.x,Actor,设计模式,Java","author_index":"因雨而生"},{"id":"1f961444d2b8322d4f975faeb98fbea1","title":"从零开始撸框架(2)-项目龙骨","content":"项目结构上文说到框架包含Ioc、Di、Orm、Cache等功能,其中只有前两者为核心功能.那么结构上可以采用分包结构开发,即分为核心、组件等功能包,如下.\n\norg.btr.ygo.core 核心包,包含了框架ioc、di功能,为其他组件提供支持.\norg.btr.ygo.tp tp意为(third-party),可以将数据库、缓存等需要引入第三方jar的功能放到这.\norg.btr.ygo.web web功能\n\n接下来我们先完成core核心包的功能开发.\n\n工厂说到核心Ioc、Di自然离不开工厂模式.我们先准备写工厂会用到的jar\nbuild.gradle\ntxtdependencies &#123;\n  // 高性能反射\n  compile &quot;com.esotericsoftware:reflectasm:1.11.9&quot;\n  // vertx核心jar\n  compile &quot;io.vertx:vertx-core:$vertxVersion&quot;\n&#125;辅助类类工厂会经常用到反射,我们需要写几个类来辅助工厂实现.\n函数类,这里会存放以后会用到的各种函数式方法.EnsureSuppliver.java\njavapackage org.btr.ygo.core.funtions;\n\n/**\n * java8的异常版本\n * @see java.util.function.Supplier\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@FunctionalInterface\npublic interface EnsureSuppliver&lt;T&gt; &#123;\n  T get() throws Exception;\n&#125;EnsureExec.java\njavapackage org.btr.ygo.core.funtions;\n\n/**\n * java8的异常版本\n * @see java.util.function.Consumer\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@FunctionalInterface\npublic interface EnsureExec &#123;\n  void exec() throws Exception;\n&#125;Fn.java\njavapackage org.btr.ygo.core.kit;\n\nimport lombok.extern.log4j.Log4j2;\nimport org.btr.ygo.core.funtions.EnsureExec;\nimport org.btr.ygo.core.funtions.EnsureSuppliver;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.function.Supplier;\n\n/**\n * 函数类,封装了条件分支以及非空判断.\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class Fn &#123;\n  // 连接池函数,优先使用key在池中找可用value,找不到才会通过Supplier去创建一个value.\n  public static &lt;K, V&gt; V pool(Map&lt;K, V&gt; map, K key, Supplier&lt;V&gt; fn) &#123;\n    V value = map.get(key);\n    if (Objects.isNull(value)) &#123;\n      value = fn.get();\n      map.put(key, value);\n    &#125;\n    return value;\n  &#125;\n  public static &lt;T&gt; T ensureRun(EnsureSuppliver&lt;T&gt; fn, Object... args) &#123;\n    return ensureRun(null, fn, args);\n  &#125;\n  public static &lt;T&gt; T ensureRun(T defaultValue, EnsureSuppliver&lt;T&gt; fn, Object... args) &#123;\n    T ret = null;\n    try &#123;\n      if (Arrays.stream(args).allMatch(Objects::nonNull)) ret = fn.get();\n    &#125; catch (Exception e) &#123;\n      e.printStackTrace();\n    &#125; finally &#123;\n      if (Objects.isNull(ret)) ret = defaultValue;\n    &#125;\n    return ret;\n  &#125;\n  public static &lt;T&gt; T ensureRun(boolean condition, EnsureSuppliver&lt;T&gt; fn1, EnsureSuppliver&lt;T&gt; fn2) &#123;\n    T ret = null;\n    try &#123;\n      if (condition &amp;&amp; Objects.nonNull(fn1)) ret = fn1.get();\n      else if (!condition &amp;&amp; Objects.nonNull(fn2)) ret = fn2.get();\n    &#125; catch (Exception e) &#123;\n      e.printStackTrace();\n    &#125;\n    return ret;\n  &#125;\n  public static void ensureExec(EnsureExec fn, Object... args) &#123;\n    try &#123;\n      if (Arrays.stream(args).allMatch(Objects::nonNull)) fn.exec();\n    &#125; catch (Exception ex) &#123;\n      ex.printStackTrace();\n    &#125;\n  &#125;\n  public static void ensureExec(boolean condition, EnsureExec fn1) &#123;\n    ensureExec(condition, fn1, null);\n  &#125;\n  public static void ensureExec(boolean condition, EnsureExec fn1, EnsureExec fn2) &#123;\n    try &#123;\n      if (condition &amp;&amp; Objects.nonNull(fn1)) fn1.exec();\n      else if (!condition &amp;&amp; Objects.nonNull(fn2)) fn2.exec();\n    &#125; catch (Exception ex) &#123;\n      ex.printStackTrace();\n    &#125;\n  &#125;\n  public static String join(CharSequence delimiter, Object... param) &#123;\n    return Fn.ensureRun(\n      () -&gt; Arrays.stream(param).map(Objects::toString).collect(Collectors.joining(delimiter)),\n      delimiter, param);\n  &#125;\n&#125;反射类,有关反射的方法都放在这.Reflect.java\njavapackage org.btr.ygo.core.kit;\n\nimport com.esotericsoftware.reflectasm.ConstructorAccess;\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\n\nimport java.lang.reflect.Constructor;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\n@SuppressWarnings(&quot;all&quot;)\npublic final class Reflect &#123;\n  // reflectasm开销主要在于对象的获取,我们把它存起来.\n  private static final Map&lt;Class&lt;?&gt;, ConstructorAccess&gt; CONSTRUCTORS = new HashMap&lt;&gt;();\n  public static &lt;T&gt; T constructor(Class&lt;?&gt; cls, Object... args) &#123;\n    T ret = null;\n    try &#123;\n      val constructors = cls.getDeclaredConstructors();\n      // 拿到类的所有构造函数,我们根据参数来判断选用何种方式创建对象.\n      // 优先使用无参,这样能调用到reflectasm.\n      // 无参不满足就只能走Java原生了.\n      for (Constructor&lt;?&gt; constructor : constructors) &#123;\n        val size = args.length;\n        if (0 == size) ret = noArgConstructor(cls);\n        else if (size != constructor.getParameterTypes().length) continue;\n        ret = (T) constructor.newInstance(args);\n      &#125;\n      return ret;\n    &#125; catch (Exception e) &#123;\n      e.printStackTrace();\n      return ret;\n    &#125;\n  &#125;\n  // 这里用到了reflectasm高性能反射,缺点就是仅支持无参.\n  public static &lt;T&gt; T noArgConstructor(Class&lt;?&gt; cls) &#123;\n    val access = Fn.pool(CONSTRUCTORS, cls, () -&gt; ConstructorAccess.get(cls));\n    return (T) access.newInstance();\n  &#125;\n&#125;本体Trunk.java\njavapackage org.btr.ygo.core.kit;\n\nimport lombok.extern.log4j.Log4j2;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\n@SuppressWarnings(&quot;unchecked&quot;)\npublic final class Trunk &#123;\n  // 单例存储所有类对象\n  private static final Map&lt;String, Object&gt; SINGLETON = new HashMap&lt;&gt;();\n  // 所有扫描的类\n  public static final Set&lt;Class&lt;?&gt;&gt; CLASSES = new HashSet&lt;&gt;();\n  // 单例,优先读map对象,无则懒加载获取实例并存入map.\n  public static &lt;T&gt; T singleton(Class&lt;?&gt; cls, Object... args) &#123;\n    return (T) Fn.pool(SINGLETON, cls.getName(), () -&gt; instance(cls, args));\n  &#125;\n  // 实例,每调用一次产生一例.\n  public static &lt;T&gt; T instance(Class&lt;?&gt; cls, Object... args) &#123;\n    return Fn\n      .ensureRun(0 == args.length, () -&gt; Reflect.noArgConstructor(cls), () -&gt; Reflect.constructor(cls, args));\n  &#125;\n&#125;测试TrunkTest.java\njavapackage org.btr.ygo.core.kit;\n\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.TestApi;\nimport org.junit.Assert;\nimport org.junit.Test;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic class TrunkTest &#123;\n  @Test\n  public void testInstance() &#123;\n    val i1 = Trunk.instance(TestApi.class);\n    val i2 = Trunk.instance(TestApi.class);\n    log.info(&quot;i1: &#123;&#125;, i2: &#123;&#125;&quot;, i1, i2);\n    Assert.assertNotEquals(i1, i2);\n  &#125;\n  @Test\n  public void testSingleton() &#123;\n    val i1 = Trunk.singleton(TestApi.class);\n    val i2 = Trunk.singleton(TestApi.class);\n    log.info(&quot;i1: &#123;&#125;, i2: &#123;&#125;&quot;, i1, i2);\n    Assert.assertEquals(i1, i2);\n  &#125;\n&#125;测试结果\n\n类扫描加载Bean管理工厂有了接下来我们来实现类的扫描加载.\n辅助类由于包比较多,我们可以一包一线程的方式进行扫描,加速类的扫描.PackageThread.java\njavapackage org.btr.ygo.core.kit;\n\nimport lombok.val;\n\nimport java.io.File;\nimport java.net.JarURLConnection;\nimport java.net.URL;\nimport java.net.URLDecoder;\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.Objects;\nimport java.util.Set;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\n\n/**\n * 包扫描线程,一包一线程.\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic final class PackageThread extends Thread &#123;\n  public final String name;\n  Set&lt;Class&lt;?&gt;&gt; classes = new HashSet&lt;&gt;();\n  public PackageThread(String name) &#123;\n    setName(&quot;ygo-package-scanner-&quot; + getId());\n    this.name = name;\n  &#125;\n  @Override\n  public void run() &#123;\n    classes.addAll(getClasses(null, name));\n  &#125;\n  public Set&lt;Class&lt;?&gt;&gt; getClasses(Predicate&lt;Class&lt;?&gt;&gt; filter, String name) &#123;\n    val classes = new LinkedHashSet&lt;Class&lt;?&gt;&gt;();\n    boolean recursive = true;\n    // a.b.c -&gt; a/b/c\n    val pkgDir = name.replace(&#39;.&#39;, &#39;/&#39;);\n    Fn.ensureExec(() -&gt; &#123;\n      val dirs = Thread.currentThread().getContextClassLoader().getResources(pkgDir);\n      while (dirs.hasMoreElements()) &#123;\n        val url = dirs.nextElement();\n        val protocol = url.getProtocol();\n        if (&quot;file&quot;.equals(protocol)) &#123;\n          val path = URLDecoder.decode(url.getFile(), StandardCharsets.UTF_8);\n          findAndAdd(pkgDir, path, classes);\n        &#125;\n        else if (&quot;jar&quot;.equals(protocol))\n          classes.addAll(getJarClasses(pkgDir, name, url, recursive));\n      &#125;\n    &#125;);\n    return null == filter ? classes : classes.stream().filter(filter).collect(Collectors.toSet());\n  &#125;\n  private Set&lt;Class&lt;?&gt;&gt; getJarClasses(String pkgDir, String name, URL url,\n    boolean recursive) &#123;\n    val classes = new LinkedHashSet&lt;Class&lt;?&gt;&gt;();\n    Fn.ensureRun(() -&gt; &#123;\n      // 去掉第一个.\n      var pkgPath = (name.startsWith(&quot;.&quot;)) ? name.substring(1) : name;\n      val jar = ((JarURLConnection) url.openConnection()).getJarFile();\n      val entries = jar.entries();\n      while (entries.hasMoreElements()) &#123;\n        val entry = entries.nextElement();\n        var entryName = entry.getName();\n        // 去掉第一个/\n        if (entryName.charAt(0) == &#39;/&#39;) entryName = entryName.substring(1);\n        if (entryName.startsWith(pkgDir)) &#123;\n          val idx = entryName.lastIndexOf(&#39;/&#39;);\n          // entryName存在/说明是package\n          // java/lang -&gt; java.lang\n          if (idx != -1) pkgPath = entryName.substring(0, idx).replace(&#39;/&#39;, &#39;.&#39;);\n          if ((idx != -1) || recursive) &#123;\n            // class文件\n            if (entryName.endsWith(&quot;.class&quot;) &amp;&amp; !entry.isDirectory()) &#123;\n              // 提取class文件名\n              val clsName =\n                entryName\n                  .substring(pkgPath.length() + 1, entryName.lastIndexOf(&quot;.class&quot;));\n              classes.add(Thread.currentThread().getContextClassLoader()\n                .loadClass(pkgPath + &#39;.&#39; + clsName));\n            &#125;\n          &#125;\n        &#125;\n      &#125;\n      return null;\n    &#125;, pkgDir, name, url);\n    return classes;\n  &#125;\n  private void findAndAdd(String pkgDir, String path, Set&lt;Class&lt;?&gt;&gt; classes) &#123;\n    Fn.ensureExec(() -&gt; &#123;\n      val file = new File(path);\n      if (!file.exists() || !file.isDirectory()) return;\n      val classFiles =\n        file.listFiles(pathname -&gt; (file.isDirectory()) || file.getName().endsWith(&quot;.class&quot;));\n      if (Objects.isNull(classFiles)) return;\n      // 去掉第一个.\n      val pkgPath = (pkgDir.startsWith(&quot;.&quot;)) ? pkgDir.substring(1) : pkgDir;\n      // 是否存在另一个文件夹\n      val processedName = pkgPath.replace(&#39;/&#39;, &#39;.&#39;);\n      for (File cls : classFiles) &#123;\n        // 目录直接跳过\n        if (cls.isDirectory())\n          findAndAdd(processedName + &#39;.&#39; + cls.getName(), cls.getAbsolutePath(),\n            classes);\n        else &#123;\n          val clsName = cls.getName();\n          val name = clsName.substring(0, clsName.lastIndexOf(&quot;.class&quot;));\n          classes.add(Thread.currentThread().getContextClassLoader()\n            .loadClass(processedName + &#39;.&#39; + name));\n        &#125;\n      &#125;\n    &#125;, pkgDir, path);\n  &#125;\n&#125;本体Packages.java\njavapackage org.btr.ygo.core.kit;\n\nimport lombok.extern.log4j.Log4j2;\nimport lombok.val;\nimport org.btr.ygo.core.constant.Console;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\n@Log4j2\npublic final class Packages &#123;\n  // 忽略不扫描的包\n  private static final Set&lt;String&gt; IGNORE_PACKAGES = Set.of(\n    &quot;ch.qos.logback&quot;,\n    &quot;io.vertx.core&quot;,\n    &quot;io.netty&quot;,\n    &quot;com.fasterxml.jackson&quot;,\n    &quot;com.esotericsoftware&quot;,\n    &quot;java&quot;,\n    &quot;javax&quot;,\n    &quot;jdk&quot;,\n    &quot;sun&quot;,\n    &quot;groovy&quot;,\n    &quot;org.graalvm&quot;,\n    &quot;org.apache&quot;,\n    &quot;org.jboss&quot;,\n    &quot;com.sun&quot;,\n    &quot;org.slf4j&quot;,\n    &quot;org.yaml&quot;,\n    &quot;org.junit&quot;,\n    &quot;org.apache.logging.log4j&quot;\n  );\n  public static Set&lt;Class&lt;?&gt;&gt; scan() &#123;\n    if (Trunk.CLASSES.isEmpty()) &#123;\n      val classes = scan(getPackages().toArray(new String[]&#123;&#125;));\n      Trunk.CLASSES.addAll(classes);\n      log.info(Console.SCANNED, &quot;Class&quot;, classes.size());\n    &#125;\n    return Trunk.CLASSES;\n  &#125;\n  private static Set&lt;String&gt; getPackages() &#123;\n    val pkgs = Arrays.stream(Package.getPackages())\n      .map(Package::getName)\n      .filter(name -&gt; IGNORE_PACKAGES.stream().noneMatch(name::startsWith))\n      .collect(Collectors.toSet());\n    log.info(Console.SCANNED, &quot;Package&quot;, pkgs.size());\n    return pkgs;\n  &#125;\n  // 多线程扫描\n  private static HashSet&lt;Class&lt;?&gt;&gt; scan(String[] dirs) &#123;\n    val threads = Arrays.stream(dirs).map(PackageThread::new).collect(Collectors.toSet());\n    threads.forEach(Thread::start);\n    val ret = new HashSet&lt;Class&lt;?&gt;&gt;();\n    try &#123;\n      // 主线程等待子线程全部扫描完毕\n      for (PackageThread thread : threads) thread.join();\n      // 将所有线程值合并\n      for (PackageThread thread : threads) ret.addAll(thread.classes);\n    &#125; catch (Exception ex) &#123;\n      ex.printStackTrace();\n    &#125;\n    return ret;\n  &#125;\n&#125;测试PackageTest.java\njavapackage org.btr.ygo.core.kit;\n\nimport lombok.val;\nimport org.hamcrest.CoreMatchers;\nimport org.junit.Assert;\nimport org.junit.Test;\n\n/**\n * @author &lt;a href=&quot;mailto:1159930219@qq.com&quot;&gt;BornToRain&lt;/a&gt;\n */\npublic class PackagesTest &#123;\n  @Test\n  public void test() &#123;\n    val classes = Packages.scan();\n    Assert.assertThat(classes, CoreMatchers.hasItem(Packages.class));\n  &#125;\n&#125;测试结果\n\n总结这一章我们完成了核心模块的龙骨搭建,让它拥有了两个最原始的功能,即工厂和类集合,有了这俩我们才能开发其他的组件.\n","slug":"从零开始撸框架(2)-项目龙骨","date":"2021-04-29T02:03:09.000Z","categories_index":"从零开始","tags_index":"Vert.x,Actor,设计模式,Java","author_index":"因雨而生"},{"id":"1da24bfae57d43586cc931d1d18b42d9","title":"奇淫巧技(2)-Jvm篇","content":"函数内联在讲函数内联之前还得讲一个Jvm经常遇到的异常StackOverFlowException,该异常一般翻译成堆栈溢出异常,其实正确或者说更严谨的翻译应该是栈溢出,栈溢出大部分发生在函数的循环或递归调用之中,极少数在对象循环创建中.\n函数调用过程\nJvm栈内存会存储所有热度函数以及它们本地变量和函数.\n新函数调用,新的栈帧加到了栈顶端,分配的本地变量和参数会存储在这.\n跳转到目标函数执行代码.\n函数返回,本地变量和参数都会销毁,栈顶被移除.\n返回原先地址继续执行.\n\n观察调用过程可以看到每次函数调用消耗都比较大,如果放在循环之中不停的重复压栈出栈操作就会导致栈溢出.\n如何优化java// 1\nfor (int i = 0; i &lt; list.size(); i++)\n// 2\nfor (int i = 0,j = list.size(); i &lt; j; i++)\n方式1每次循环都会去调用list来获取他最新的size长度,上面我们已经说到了函数调用的开销,故而方式1会随着循环不断增加开销,此时函数的开销是N.\n方式2只在循环初始化的时候进行了一次函数调用获取size长度并用局部变量保存下来,后面循环开始之后再也没有函数调用开销,此时函数开销始终是1.\n\n如何避免或减少开销这时候就该聊到我们上面提到的函数内联了,它可以显著减少栈帧的创建,多个函数使用一个栈帧来避免栈帧过分.在Jvm中无法人为强行函数内联,只能建议.Jvm是通过函数字节大小以及热度来决定是否内联的,因为我们只要日常代码中满足以下条件即可.\n\n函数字节小于35字节时,Jvm会自动内联优化,我们也可以通过修改Jvm参数**-XX:MaxInlineSize&#x3D;N**来调整内联字节数\n当函数字节小于325字节并且函数是热点时,Jvm会自动内联优化,我们也可以通过修改Jvm参数**-XX:MaxFreqInlineSize&#x3D;N**来调整内联字节数\nJvm自动识别函数热度进行内联,我们也可以通过修改Jvm参数**-XX:CompileThreshold&#x3D;N**来调整函数热度\n这算是函数内联的隐含条件,编码中多多使用private、static、final来定义函数.如果一个函数没有被外部使用,用这些关键字可以建议Jvm进行内联.,Scala可以直接使用@inline注解来建议Jvm内联.\n\n","slug":"奇淫巧技(2)-Jvm篇","date":"2021-04-28T00:04:30.000Z","categories_index":"奇淫巧技","tags_index":"Jvm","author_index":"因雨而生"},{"id":"91972c9f8cfda280c91f3305c833ffbf","title":"奇淫巧技(1)-Java篇","content":"编码习惯多使用值(val)而不是变量(var)\n变量非线程安全,并发存在读写问题.而值因为其不可修改性天然线程安全无读写问题.多线程开发中值也不用锁,性能更优,程序猿也不用关心多线程下的并发读写锁问题,心智要求大大降低.\n单线程性能也更高,如图.\n\njava// 1\npublic static int sum() &#123;\n  int a = 2;\n  int b = 3;\n  return a + b;\n&#125;\n// 2\npublic static int sum() &#123;\n  val a = 2;\n  val b = 3;\n  return a + ｂ；\n&#125;方式１编译后\njavaiconst_2\n// 设置a的值\nistore_0\niconst_3\n// 设置b的值\nistore_1\n// 读取a的值\niload_0\n// 读取b的值\niload_1\niadd\nireturn方式2编译后\njava// 常量折叠了,没有访问&quot;局部变量&quot;\niconst_5\nireturn不过有的场景下值与变量并无二异,比如将上图代码的常量值替换成动态计算的函数\njava// 1\npublic static int sum() &#123;\n  int a = fun1();\n  int b = fun2();\n  return a + b;\n&#125;\n// 2\npublic static int sum() &#123;\n  val a = fun1();\n  val b = fun2();\n  return a + b;\n&#125;编译后\njavainvokestatic fun1:()I\n// 设置a的值\nistore_0\ninvokestatic fun2:()I\n// 设置b的值\nistore_1\n// 读取a的值\niload_0\n// 读取b的值\niload_1\niadd\nireturnswitch优化\n工具jarLombokLombok是一个简化Java代码的神兵利器,提供了很多非常实用的注解(并且是非运行时),能减少大量重复代码,其具体实现原理及机制在这不做展开,这里只讲应用.\n\n@Data 常用于开发中的Entity、VO、DTO上,会自动为其属性生成Getter、Setter函数,并覆盖实现了原生的ToString、HashCode、Equals函数.\n@Log4j2、Slf4j 为注解类生成一个日志静态量,名为log.\n@AllArgsConstructor 生成一个全参构造,一般配合构造注入使用.\n@Builder 设计模式中的建造者模式\n@Value 构建一个值对象,即类的属性都是不可变量.\n@Cleanup 自动为IO类型关闭资源.\nval Java9var的常量版本.ex: val i &#x3D; 1等效于final int i &#x3D; 1;.\n\nVavrVavr为Java提供了更为强大的Fp支持,虽然比不上其他Fp语言的简单明了,但在Java也算是首屈一指的函数式第三方jar了.\n\nOption(单个数据处理) 相比Optional更加完备\nTry(异常处理)\nValidation(数据校验)\nEither(异常处理)\nFuture(异步处理)\nTuple(元祖类型)\nLazy(惰性求值)\n\n每个函数更具体的信息官方文档都有详细介绍Vavr\n","slug":"奇淫巧技(1)-Java篇 ","date":"2021-04-27T23:20:29.000Z","categories_index":"奇淫巧技","tags_index":"Java,面向函数(FP)","author_index":"因雨而生"},{"id":"f1128ae1167b6a3027acc0aa9f078931","title":"从零开始撸框架(1)-写在开始之前","content":"起因码农日常搬砖中都听说过一句话: 不要重复造轮子(一说是不要造重复的轮子).与公司来说这句话自然是绝对正确的,自研或仿造的轮子往往各方面都不如开源现有的轮子来得好,这样对公司来说无疑是最致命的.但是与个人来说,造轮子的过程同时是阅读他人代码提升自己的过程,而且轮子造完自身也会有种莫名的满足感.\n随着开发的深入,项目需求越来越复杂.市面上一些开源轮子(Spring-boot,Vert.x,Akka)无法满足我们功能需求,自此日常开发中也会采用一些二次轮子(即基于开源轮子再封装一层, ex: Jeecg-boot, Di-boot…各种基于Spring-boot或封装或魔改的轮子).这类二次轮子中维护者或个人或公司,个人的全靠满腔热血,bug反馈以及后期升级堪忧.公司的往往包含多版本(民用、商用、企业)等并且收费不低.关于收费这事我个人看法就是不耻,诚然小部分公司都对这些开源轮子进行了大部分改动,但那总归只是少数.绝大部分都是给开源轮子封了一层皮就敢拿出来卖,这也是前阵子为啥Elastic修改开源协议这档子事.\n回到现在,既然市面上二次轮子也不少.我如今趁着三分钟热度也来造一个轮子未尝不可,只是这次我要和市面上常见的那些妖艳贱货不一样,绝对不会采用一些已经烂大街的技术或框架(当然这并不绝对).这次写下这一系列文章一方面给自己留档,一方面给以后那些想造轮子又找不到方法的朋友参考,这个小白兔有人替你们当了.\n定位所谓定位就是这框架目的是什么,起到什么作用,解决什么问题,适用什么场景,面向什么人员.个人认为对于项目刚启动时候的定位不一定就需要画类图写设计文档,毕竟最初只有雏形概念.我们完全可以把核心概念草稿下来就好,日后再补上类图设计文档也不是问题.\n我们这次框架目的就是造一个类似于Spring-boot的轮子,但是又不那么大众化,定位自然就是一个拥有Ioc、Di、Cache、Orm、Rpc的web开发框架.\n技术选型说完了定位来聊聊技术的选型,框架一般来说最重要就那么几个东西,稳定、易用、高性能、可扩展,结合一下几点我们可以筛选出以下几个来.\n\nJava 语言层面毫无疑问它是最满足需求的,比他高性能(c、c++、rust…)的没他简单,比他简单的又没他的性能(js、php…),我个人是偏爱scala的,奈何jvm上和java比除了自己写起来舒服没啥特别优势了.\nVert.x Netty是Jvm上的性能霸主,只要跟性能沾边的就离不开Netty,而Netty过于底层不太适合直接写web框架,最终选用Vert.x(Quarkus,Micronaut封装比Vert.x还是多了些,尽量采用更底层的toolkit而不是现成的framework).\nRedis 无心插柳柳成荫,本意是作为NoSql奈何在缓存方面的光芒掩盖了它本身的定位.\n\n开发环境截止到文章日期,Jdk最新是16,lts长期稳定支持版是11,故我们采用Jdk11.\n\nJdk11\nIdea\nGradle Spring5开始从Maven切到了Gradle,现在新项目没理由用Maven.\n\n命名好的框架从命名开始,复杂难记的框架注定火不起来,经过深思熟虑后框架名为ygo(Yu-Gi-Oh),懂的都懂.\n开搞写框架之前的准备我们都做完了,下一步就来搭建框架的龙骨了.\n","slug":"从零开始撸框架(1)-写在开始之前","date":"2021-04-27T19:27:03.000Z","categories_index":"从零开始","tags_index":"Vert.x,Actor,设计模式,Java","author_index":"因雨而生"}]